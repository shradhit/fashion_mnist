{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Classification and features\n",
    "\n",
    "First, import necessary packages; if you do not have [``ipympl``](https://github.com/matplotlib/jupyter-matplotlib) installed, then you can replace ``%matplotlib widget`` with either ``%matplotlib notebook`` if you're running the old Jupyter notebook GUI, otherwise with ``%matplotlib inline`` (which does not allow interaction with plot figures, but should work universally)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "# Replace \"widget\" with \"inline\" or \"notebook\", if necessary\n",
    "%matplotlib widget\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn.decomposition import PCA, FastICA\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Activation, Conv2D\n",
    "\n",
    "from keras.utils import to_categorical\n",
    "from keras.datasets import fashion_mnist"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then, load the dataset (if this is the first time you're doing this, you will need a network connection)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "(x3_train, y_train), (x3_test, y_test) = fashion_mnist.load_data()\n",
    "n_classes = np.max(y_train) + 1\n",
    "\n",
    "# Vectorize image arrays, since most methods expect this format\n",
    "x_train = x3_train.reshape(x3_train.shape[0], np.prod(x3_train.shape[1:]))\n",
    "x_test = x3_test.reshape(x3_test.shape[0], np.prod(x3_test.shape[1:]))\n",
    "\n",
    "# Binary vector representation of targets (for one-hot or multinomial output networks)\n",
    "y3_train = to_categorical(y_train)\n",
    "y3_test = to_categorical(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=uint8)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.unique(y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we shall define some auxiliary functions for inspecting the image data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def show_images(images, cols = 5, cmap=plt.cm.gray, im_shape=None, fig=None):\n",
    "    \"\"\"Display a set of images.\n",
    "    \n",
    "    images: Either a (N,K) or (N,K,L) array. If 2D, then each row will be reshaped to a rectangle.\n",
    "    im_shape: If images is 2D, the shape of each image. If omitted, defaults to (sqrt(K),sqrt(K)).\n",
    "    cols: Number of columns in subplots; rows is ceil(N/cols).\n",
    "    cmap: Colormap to use.\"\"\"\n",
    "    if fig is None:\n",
    "        fig = plt.figure()\n",
    "    dims = images.shape\n",
    "    if len(dims) not in (2,3):\n",
    "        raise ValueError(\"images must be either 2D or 3D array\")\n",
    "    if len(dims) == 3:\n",
    "        if im_shape is not None:\n",
    "            raise ValueError(\"im_shape redundant when images is a 3D array\")\n",
    "        else:\n",
    "            im_shape = dims[1:]\n",
    "    if len(dims) == 2 and im_shape is None:\n",
    "        L = int(np.sqrt(dims[1]))\n",
    "        if L*L != dims[1]:\n",
    "            raise ValueError(\"im_shape is missing and number of columns not a perfect square\")\n",
    "        im_shape = (L, L)\n",
    "    N = dims[0]\n",
    "    rows = (N + cols - 1)//cols\n",
    "    for i in range(N):\n",
    "        ax = fig.add_subplot(rows, cols, i+1)\n",
    "        ax.set_xticks([]); ax.set_yticks([])\n",
    "        ax.imshow(images[i,...].reshape(im_shape), cmap=cmap)\n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a13b5e3b8a4f4c48855bc6dd72d148c3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FigureCanvasNbAgg()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "show_images(x3_train[0:15,...])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Logistic regression on raw images\n",
    "\n",
    "First train a logistic regression model on the raw images, using ``scikit-learn``, and report training and test errors.  Make sure to explain any additional steps you needing to take, including (but not necessarily limited to):\n",
    "- Target variable encoding (multinomial vs. one-hot)\n",
    "- Optimizer and it's parameters\n",
    "- Regularizer (e.g., none, $L_1$ or $L_2$) and its parameter(s)\n",
    "- Any normalization you performed on feature values (e.g., centering, unit-variance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "60000"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dim = x_train.shape\n",
    "dim[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/shradhitsubudhi/anaconda3/envs/python37/lib/python3.7/site-packages/sklearn/linear_model/sag.py:334: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train score: 0.878100\n",
      "Test score: 0.844900\n"
     ]
    }
   ],
   "source": [
    "#l1  \n",
    "l_one = LogisticRegression(solver='saga', multi_class='multinomial', penalty = \"l1\")\n",
    "l_one.fit(x_train, y_train)\n",
    "print(\"Train score: %f\" % l_one.score(x_train, y_train))\n",
    "print(\"Test score: %f\" % l_one.score(x_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train score: 0.706233\n",
      "Test score: 0.705000\n"
     ]
    }
   ],
   "source": [
    "# L2 - default is l2\n",
    "\n",
    "lr = LogisticRegression(solver='lbfgs', multi_class='multinomial')\n",
    "lr.fit(x_train, y_train)\n",
    "print(\"Train score: %f\" % lr.score(x_train, y_train))\n",
    "print(\"Test score: %f\" % lr.score(x_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Visualize the model coefficients for each of the ten classes as an image (you can use ``show_images`` defined above); is there an intuitive interpretation?  Include this in your remarks below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10, 784)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 10 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Your code ########\n",
    "# TODO: Modify this code, as you deem necessary (and don't forget to comment below)\n",
    "show_images(lr.coef_)\n",
    "\n",
    "#lr.coef_.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 10 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#show_images(l_one.coef_)\n",
    "show_images(l_one.coef_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "### Your remarks/discussion on \"straight\" logistic regression (see questions above):\n",
    "\n",
    "**TODO**: Edit cell to add your comments\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use ten-fold cross-validation to select a good $L_1$-norm regularization strength. You may want to look at\n",
    "``sklearn.linear_model.LogisticRegressionCV`` as well as Scikit-Learn's [overview of cross-validation](https://scikit-learn.org/stable/modules/cross_validation.html)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,\n",
       "       1.e+03, 1.e+04])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.power(10.0, np.arange(-5, 5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1e-05, 0.0001, 0.001, 0.01, 0.1, 1.0, 10.0, 100.0, 1000.0, 10000.0]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(np.power(10.0, np.arange(-5, 5)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegressionCV(Cs=[1e-05, 0.0001, 0.001, 0.01, 0.1, 1.0, 10.0, 100.0, 1000.0, 10000.0],\n",
       "           class_weight=None, cv=10, dual=False, fit_intercept=True,\n",
       "           intercept_scaling=1.0, max_iter=10000,\n",
       "           multi_class='multinomial', n_jobs=None, penalty='l1',\n",
       "           random_state=None, refit=True, scoring=None, solver='saga',\n",
       "           tol=10, verbose=0)"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegressionCV\n",
    "\n",
    "searchCV = LogisticRegressionCV(\n",
    "        Cs=list(np.power(10.0, np.arange(-5, 5)))\n",
    "        ,penalty = 'l1'\n",
    "        ,cv = 10\n",
    "        ,max_iter = 10000\n",
    "        ,solver = 'saga'\n",
    "        ,tol=10\n",
    "        ,multi_class =\"multinomial\"\n",
    "        )\n",
    "searchCV.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.7725     0.83233333 0.84183333 0.84566667 0.85       0.85166667\n",
      "  0.85233333 0.851      0.85083333 0.85      ]\n",
      " [0.75133333 0.83916667 0.85266667 0.85616667 0.85566667 0.85816667\n",
      "  0.85866667 0.85783333 0.859      0.85966667]\n",
      " [0.7555     0.82683333 0.838      0.84016667 0.84233333 0.8425\n",
      "  0.84433333 0.84383333 0.8435     0.84316667]\n",
      " [0.75866667 0.8235     0.84483333 0.8465     0.85116667 0.85233333\n",
      "  0.85166667 0.84983333 0.84933333 0.84883333]\n",
      " [0.74566667 0.836      0.84316667 0.85266667 0.85583333 0.85966667\n",
      "  0.859      0.8585     0.85816667 0.8575    ]\n",
      " [0.7495     0.83116667 0.84933333 0.84883333 0.85483333 0.85583333\n",
      "  0.85633333 0.8565     0.85716667 0.85716667]\n",
      " [0.77266667 0.83766667 0.849      0.85483333 0.85683333 0.85833333\n",
      "  0.85866667 0.858      0.85933333 0.85916667]\n",
      " [0.76566667 0.82633333 0.8415     0.85133333 0.854      0.8545\n",
      "  0.8555     0.85383333 0.853      0.85333333]\n",
      " [0.754      0.8335     0.842      0.84966667 0.85516667 0.85466667\n",
      "  0.85666667 0.85766667 0.857      0.85683333]\n",
      " [0.76266667 0.8295     0.84283333 0.84766667 0.84883333 0.85233333\n",
      "  0.85233333 0.85183333 0.85183333 0.85233333]]\n"
     ]
    }
   ],
   "source": [
    "box_plot = searchCV.scores_[0]\n",
    "print(box_plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,\n",
       "       1.e+03, 1.e+04])"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "index = searchCV.Cs_\n",
    "index"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot the cross-validation scores against parameter value, using a [box plot](https://matplotlib.org/gallery/statistics/boxplot_demo.html)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1.e-05</th>\n",
       "      <th>1.e-04</th>\n",
       "      <th>1.e-03</th>\n",
       "      <th>1.e-02</th>\n",
       "      <th>1.e-01</th>\n",
       "      <th>1.e-00</th>\n",
       "      <th>1.e+01</th>\n",
       "      <th>1.e+02</th>\n",
       "      <th>1.e+03</th>\n",
       "      <th>1.e+04</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.772500</td>\n",
       "      <td>0.832333</td>\n",
       "      <td>0.841833</td>\n",
       "      <td>0.845667</td>\n",
       "      <td>0.850000</td>\n",
       "      <td>0.851667</td>\n",
       "      <td>0.852333</td>\n",
       "      <td>0.851000</td>\n",
       "      <td>0.850833</td>\n",
       "      <td>0.850000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.751333</td>\n",
       "      <td>0.839167</td>\n",
       "      <td>0.852667</td>\n",
       "      <td>0.856167</td>\n",
       "      <td>0.855667</td>\n",
       "      <td>0.858167</td>\n",
       "      <td>0.858667</td>\n",
       "      <td>0.857833</td>\n",
       "      <td>0.859000</td>\n",
       "      <td>0.859667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.755500</td>\n",
       "      <td>0.826833</td>\n",
       "      <td>0.838000</td>\n",
       "      <td>0.840167</td>\n",
       "      <td>0.842333</td>\n",
       "      <td>0.842500</td>\n",
       "      <td>0.844333</td>\n",
       "      <td>0.843833</td>\n",
       "      <td>0.843500</td>\n",
       "      <td>0.843167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.758667</td>\n",
       "      <td>0.823500</td>\n",
       "      <td>0.844833</td>\n",
       "      <td>0.846500</td>\n",
       "      <td>0.851167</td>\n",
       "      <td>0.852333</td>\n",
       "      <td>0.851667</td>\n",
       "      <td>0.849833</td>\n",
       "      <td>0.849333</td>\n",
       "      <td>0.848833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.745667</td>\n",
       "      <td>0.836000</td>\n",
       "      <td>0.843167</td>\n",
       "      <td>0.852667</td>\n",
       "      <td>0.855833</td>\n",
       "      <td>0.859667</td>\n",
       "      <td>0.859000</td>\n",
       "      <td>0.858500</td>\n",
       "      <td>0.858167</td>\n",
       "      <td>0.857500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     1.e-05    1.e-04    1.e-03    1.e-02    1.e-01    1.e-00    1.e+01  \\\n",
       "0  0.772500  0.832333  0.841833  0.845667  0.850000  0.851667  0.852333   \n",
       "1  0.751333  0.839167  0.852667  0.856167  0.855667  0.858167  0.858667   \n",
       "2  0.755500  0.826833  0.838000  0.840167  0.842333  0.842500  0.844333   \n",
       "3  0.758667  0.823500  0.844833  0.846500  0.851167  0.852333  0.851667   \n",
       "4  0.745667  0.836000  0.843167  0.852667  0.855833  0.859667  0.859000   \n",
       "\n",
       "     1.e+02    1.e+03    1.e+04  \n",
       "0  0.851000  0.850833  0.850000  \n",
       "1  0.857833  0.859000  0.859667  \n",
       "2  0.843833  0.843500  0.843167  \n",
       "3  0.849833  0.849333  0.848833  \n",
       "4  0.858500  0.858167  0.857500  "
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#import seaborn\n",
    "#seaborn.boxplot(x =  y = box_plot, whis = 1)\n",
    "import pandas as pd\n",
    "df = pd.DataFrame({'1.e-05':box_plot[:,0], '1.e-04':box_plot[:,1], '1.e-03':box_plot[:,2], '1.e-02': box_plot[:,3],\n",
    "                       '1.e-01':box_plot[:,4], '1.e-00':box_plot[:,5],'1.e+01':box_plot[:,6], '1.e+02':box_plot[:,7], \n",
    "                        '1.e+03':box_plot[:,8], '1.e+04':box_plot[:,9] })\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x4dedbcb70>"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.plot.box()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, train a neural network that performs multi-class logistic regression, and compare it's performance against the Scikit-learn model.  Try to get it to perform as close to the Scikit-learn model as possible.\n",
    "\n",
    "In addition to describing briefly what you did, and discussing performance, do not forget to also explain your output encoding as well as the corresponding choice of activation function and loss function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#normalization of the data inputs \n",
    "\n",
    "x_train = x_train.astype('float32') \n",
    "x_test = x_test.astype('float32') \n",
    "x_train /= 255 \n",
    "x_test /= 255\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense_3 (Dense)              (None, 10)                7850      \n",
      "=================================================================\n",
      "Total params: 7,850\n",
      "Trainable params: 7,850\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "from keras.models import Sequential \n",
    "from keras.layers import Dense, Activation \n",
    "from keras.regularizers import L1L2\n",
    "\n",
    "output_dim = nb_classes = len(np.unique(y_train))\n",
    "input_dim = x_train.shape[1]\n",
    "model = Sequential() \n",
    "model.add(Dense(output_dim, input_dim = input_dim, activation='softmax',kernel_regularizer = L1L2(l1=0, l2 = 0.01))) \n",
    "batch_size = 50\n",
    "nb_epoch = 40\n",
    "model.compile(optimizer = 'sgd', loss = 'categorical_crossentropy', metrics=['accuracy']) \n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /Users/shradhitsubudhi/anaconda3/envs/python37/lib/python3.7/site-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n",
      "Train on 60000 samples, validate on 10000 samples\n",
      "Epoch 1/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 1.1327 - acc: 0.7157 - val_loss: 0.9373 - val_acc: 0.7638\n",
      "Epoch 2/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.8676 - acc: 0.7916 - val_loss: 0.8505 - val_acc: 0.7880\n",
      "Epoch 3/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.8057 - acc: 0.8072 - val_loss: 0.8063 - val_acc: 0.7988\n",
      "Epoch 4/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7731 - acc: 0.8126 - val_loss: 0.7839 - val_acc: 0.8044\n",
      "Epoch 5/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7539 - acc: 0.8167 - val_loss: 0.7664 - val_acc: 0.8086\n",
      "Epoch 6/40\n",
      "60000/60000 [==============================] - 1s 16us/step - loss: 0.7418 - acc: 0.8194 - val_loss: 0.7562 - val_acc: 0.8108\n",
      "Epoch 7/40\n",
      "60000/60000 [==============================] - 1s 16us/step - loss: 0.7334 - acc: 0.8220 - val_loss: 0.7515 - val_acc: 0.8113\n",
      "Epoch 8/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7282 - acc: 0.8231 - val_loss: 0.7460 - val_acc: 0.8125\n",
      "Epoch 9/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7243 - acc: 0.8222 - val_loss: 0.7425 - val_acc: 0.8115\n",
      "Epoch 10/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7214 - acc: 0.8227 - val_loss: 0.7401 - val_acc: 0.8124\n",
      "Epoch 11/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7190 - acc: 0.8231 - val_loss: 0.7385 - val_acc: 0.8133\n",
      "Epoch 12/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7180 - acc: 0.8239 - val_loss: 0.7374 - val_acc: 0.8149\n",
      "Epoch 13/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7163 - acc: 0.8235 - val_loss: 0.7399 - val_acc: 0.8077\n",
      "Epoch 14/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7152 - acc: 0.8234 - val_loss: 0.7358 - val_acc: 0.8104\n",
      "Epoch 15/40\n",
      "60000/60000 [==============================] - 1s 16us/step - loss: 0.7143 - acc: 0.8226 - val_loss: 0.7325 - val_acc: 0.8134\n",
      "Epoch 16/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7136 - acc: 0.8228 - val_loss: 0.7334 - val_acc: 0.8113\n",
      "Epoch 17/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7129 - acc: 0.8226 - val_loss: 0.7321 - val_acc: 0.8141\n",
      "Epoch 18/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7123 - acc: 0.8227 - val_loss: 0.7355 - val_acc: 0.8084\n",
      "Epoch 19/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7117 - acc: 0.8228 - val_loss: 0.7309 - val_acc: 0.8108\n",
      "Epoch 20/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7113 - acc: 0.8223 - val_loss: 0.7301 - val_acc: 0.8111\n",
      "Epoch 21/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7111 - acc: 0.8230 - val_loss: 0.7295 - val_acc: 0.8106\n",
      "Epoch 22/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7104 - acc: 0.8214 - val_loss: 0.7300 - val_acc: 0.8107\n",
      "Epoch 23/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7103 - acc: 0.8229 - val_loss: 0.7312 - val_acc: 0.8092\n",
      "Epoch 24/40\n",
      "60000/60000 [==============================] - 1s 14us/step - loss: 0.7099 - acc: 0.8215 - val_loss: 0.7289 - val_acc: 0.8141\n",
      "Epoch 25/40\n",
      "60000/60000 [==============================] - 1s 14us/step - loss: 0.7101 - acc: 0.8205 - val_loss: 0.7291 - val_acc: 0.8109\n",
      "Epoch 26/40\n",
      "60000/60000 [==============================] - 1s 16us/step - loss: 0.7095 - acc: 0.8216 - val_loss: 0.7284 - val_acc: 0.8110\n",
      "Epoch 27/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7094 - acc: 0.8216 - val_loss: 0.7287 - val_acc: 0.8123\n",
      "Epoch 28/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7093 - acc: 0.8207 - val_loss: 0.7287 - val_acc: 0.8086\n",
      "Epoch 29/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7092 - acc: 0.8212 - val_loss: 0.7275 - val_acc: 0.8109\n",
      "Epoch 30/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7090 - acc: 0.8204 - val_loss: 0.7294 - val_acc: 0.8087\n",
      "Epoch 31/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7087 - acc: 0.8203 - val_loss: 0.7265 - val_acc: 0.8103\n",
      "Epoch 32/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7087 - acc: 0.8205 - val_loss: 0.7280 - val_acc: 0.8109\n",
      "Epoch 33/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7085 - acc: 0.8204 - val_loss: 0.7271 - val_acc: 0.8103\n",
      "Epoch 34/40\n",
      "60000/60000 [==============================] - 1s 16us/step - loss: 0.7085 - acc: 0.8205 - val_loss: 0.7280 - val_acc: 0.8091\n",
      "Epoch 35/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7084 - acc: 0.8206 - val_loss: 0.7271 - val_acc: 0.8086\n",
      "Epoch 36/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7083 - acc: 0.8206 - val_loss: 0.7274 - val_acc: 0.8093\n",
      "Epoch 37/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7084 - acc: 0.8205 - val_loss: 0.7258 - val_acc: 0.8112\n",
      "Epoch 38/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7082 - acc: 0.8198 - val_loss: 0.7272 - val_acc: 0.8099\n",
      "Epoch 39/40\n",
      "60000/60000 [==============================] - 1s 15us/step - loss: 0.7080 - acc: 0.8203 - val_loss: 0.7269 - val_acc: 0.8088\n",
      "Epoch 40/40\n",
      "60000/60000 [==============================] - 1s 14us/step - loss: 0.7081 - acc: 0.8199 - val_loss: 0.7263 - val_acc: 0.8089\n"
     ]
    }
   ],
   "source": [
    "#model.compile(optimizer = 'sgd', loss = 'categorical_crossentropy', metrics=['accuracy']) \n",
    "history = model.fit(x_train, y3_train, batch_size = batch_size, epochs = nb_epoch, verbose = 1, validation_data = (x_test, y3_test)) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10000/10000 [==============================] - 0s 8us/step\n",
      "Test score: 0.7263318751335144\n",
      "Test accuracy: 0.8089\n"
     ]
    }
   ],
   "source": [
    "score = model.evaluate(x_test, y3_test) \n",
    "print('Test score:', score[0]) \n",
    "print('Test accuracy:', score[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Just as you did for the Scikit-learn logistic model, visualize the coefficients (aka. weights) for each class as an image, and include possible interpretation in your comments below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'dense_2/Softmax:0': array([[0.02882992, 0.08756681, 0.09724434, ..., 0.06030595, 0.03564792,\n",
       "         0.12474404],\n",
       "        [0.02066273, 0.11450718, 0.02446118, ..., 0.10555852, 0.02956161,\n",
       "         0.083628  ],\n",
       "        [0.07028463, 0.11941695, 0.06221462, ..., 0.10744552, 0.11328158,\n",
       "         0.1005318 ],\n",
       "        ...,\n",
       "        [0.0374655 , 0.09111197, 0.02859823, ..., 0.14126074, 0.09436668,\n",
       "         0.07732198],\n",
       "        [0.05486306, 0.09100983, 0.05911916, ..., 0.13181284, 0.07144627,\n",
       "         0.11825915],\n",
       "        [0.10005664, 0.103297  , 0.11409769, ..., 0.09803855, 0.05707751,\n",
       "         0.07964708]], dtype=float32)}"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from keract import get_activations\n",
    "get_activations(model, x_train)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keract import get_gradients_of_trainable_weights, display_gradients_of_trainable_weights\n",
    "display = get_gradients_of_trainable_weights(model, x_train, y3_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10, 784)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#for key in a: print(key)\n",
    "display_arr = np.array(a[\"dense_2/kernel:0\"]).T\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 10 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "show_images(display_arr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, repeat the training process at least ten times (starting with a fresh model and a different random seed each time) and plot the performance (accuracy) of your trained model using a boxplot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 60000 samples, validate on 10000 samples\n",
      "Epoch 1/40\n",
      "60000/60000 [==============================] - 1s 23us/step - loss: 0.7071 - acc: 0.8194 - val_loss: 0.7283 - val_acc: 0.8059\n",
      "Epoch 2/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8195 - val_loss: 0.7266 - val_acc: 0.8086\n",
      "Epoch 3/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8188 - val_loss: 0.7281 - val_acc: 0.8075\n",
      "Epoch 4/40\n",
      "60000/60000 [==============================] - 1s 19us/step - loss: 0.7071 - acc: 0.8197 - val_loss: 0.7275 - val_acc: 0.8070\n",
      "Epoch 5/40\n",
      "60000/60000 [==============================] - 1s 19us/step - loss: 0.7070 - acc: 0.8196 - val_loss: 0.7258 - val_acc: 0.8074\n",
      "Epoch 6/40\n",
      "60000/60000 [==============================] - 1s 19us/step - loss: 0.7072 - acc: 0.8185 - val_loss: 0.7279 - val_acc: 0.8060\n",
      "Epoch 7/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8191 - val_loss: 0.7270 - val_acc: 0.8062\n",
      "Epoch 8/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8189 - val_loss: 0.7298 - val_acc: 0.8055\n",
      "Epoch 9/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8188 - val_loss: 0.7282 - val_acc: 0.8088\n",
      "Epoch 10/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8191 - val_loss: 0.7262 - val_acc: 0.8078\n",
      "Epoch 11/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8196 - val_loss: 0.7259 - val_acc: 0.8078\n",
      "Epoch 12/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8188 - val_loss: 0.7268 - val_acc: 0.8077\n",
      "Epoch 13/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8193 - val_loss: 0.7256 - val_acc: 0.8096\n",
      "Epoch 14/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8178 - val_loss: 0.7259 - val_acc: 0.8082\n",
      "Epoch 15/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8188 - val_loss: 0.7256 - val_acc: 0.8114\n",
      "Epoch 16/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8193 - val_loss: 0.7262 - val_acc: 0.8081\n",
      "Epoch 17/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8189 - val_loss: 0.7250 - val_acc: 0.8095\n",
      "Epoch 18/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7069 - acc: 0.8196 - val_loss: 0.7256 - val_acc: 0.8089\n",
      "Epoch 19/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8197 - val_loss: 0.7259 - val_acc: 0.8089\n",
      "Epoch 20/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8198 - val_loss: 0.7255 - val_acc: 0.8082\n",
      "Epoch 21/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8185 - val_loss: 0.7267 - val_acc: 0.8086\n",
      "Epoch 22/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8198 - val_loss: 0.7261 - val_acc: 0.8084\n",
      "Epoch 23/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8188 - val_loss: 0.7264 - val_acc: 0.8088\n",
      "Epoch 24/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8193 - val_loss: 0.7262 - val_acc: 0.8076\n",
      "Epoch 25/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8193 - val_loss: 0.7256 - val_acc: 0.8088\n",
      "Epoch 26/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8190 - val_loss: 0.7268 - val_acc: 0.8075\n",
      "Epoch 27/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8189 - val_loss: 0.7315 - val_acc: 0.8053\n",
      "Epoch 28/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7069 - acc: 0.8197 - val_loss: 0.7265 - val_acc: 0.8065\n",
      "Epoch 29/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8189 - val_loss: 0.7264 - val_acc: 0.8092\n",
      "Epoch 30/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8198 - val_loss: 0.7280 - val_acc: 0.8086\n",
      "Epoch 31/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8192 - val_loss: 0.7261 - val_acc: 0.8086\n",
      "Epoch 32/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8189 - val_loss: 0.7264 - val_acc: 0.8070\n",
      "Epoch 33/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8184 - val_loss: 0.7277 - val_acc: 0.8065\n",
      "Epoch 34/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8185 - val_loss: 0.7270 - val_acc: 0.8073\n",
      "Epoch 35/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8188 - val_loss: 0.7258 - val_acc: 0.8099\n",
      "Epoch 36/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7069 - acc: 0.8193 - val_loss: 0.7279 - val_acc: 0.8070\n",
      "Epoch 37/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8192 - val_loss: 0.7261 - val_acc: 0.8080\n",
      "Epoch 38/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8199 - val_loss: 0.7251 - val_acc: 0.8093\n",
      "Epoch 39/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8189 - val_loss: 0.7269 - val_acc: 0.8091\n",
      "Epoch 40/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8194 - val_loss: 0.7258 - val_acc: 0.8095\n",
      "10000/10000 [==============================] - 0s 12us/step\n",
      "Train on 60000 samples, validate on 10000 samples\n",
      "Epoch 1/40\n",
      "60000/60000 [==============================] - 1s 21us/step - loss: 0.7071 - acc: 0.8187 - val_loss: 0.7258 - val_acc: 0.8108\n",
      "Epoch 2/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8193 - val_loss: 0.7277 - val_acc: 0.8083\n",
      "Epoch 3/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8189 - val_loss: 0.7294 - val_acc: 0.8073\n",
      "Epoch 4/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8194 - val_loss: 0.7255 - val_acc: 0.8095\n",
      "Epoch 5/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8182 - val_loss: 0.7270 - val_acc: 0.8084\n",
      "Epoch 6/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8191 - val_loss: 0.7251 - val_acc: 0.8092\n",
      "Epoch 7/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7075 - acc: 0.8188 - val_loss: 0.7250 - val_acc: 0.8098\n",
      "Epoch 8/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7075 - acc: 0.8185 - val_loss: 0.7251 - val_acc: 0.8085\n",
      "Epoch 9/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8191 - val_loss: 0.7257 - val_acc: 0.8097\n",
      "Epoch 10/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8199 - val_loss: 0.7261 - val_acc: 0.8088\n",
      "Epoch 11/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8188 - val_loss: 0.7277 - val_acc: 0.8084\n",
      "Epoch 12/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7069 - acc: 0.8189 - val_loss: 0.7298 - val_acc: 0.8054\n",
      "Epoch 13/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8187 - val_loss: 0.7271 - val_acc: 0.8075\n",
      "Epoch 14/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8182 - val_loss: 0.7264 - val_acc: 0.8076\n",
      "Epoch 15/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8194 - val_loss: 0.7257 - val_acc: 0.8080\n",
      "Epoch 16/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8183 - val_loss: 0.7256 - val_acc: 0.8097\n",
      "Epoch 17/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8185 - val_loss: 0.7293 - val_acc: 0.8059\n",
      "Epoch 18/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8192 - val_loss: 0.7262 - val_acc: 0.8079\n",
      "Epoch 19/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7071 - acc: 0.8185 - val_loss: 0.7277 - val_acc: 0.8086\n",
      "Epoch 20/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7074 - acc: 0.8193 - val_loss: 0.7254 - val_acc: 0.8073\n",
      "Epoch 21/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8191 - val_loss: 0.7255 - val_acc: 0.8080\n",
      "Epoch 22/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7075 - acc: 0.8183 - val_loss: 0.7279 - val_acc: 0.8075\n",
      "Epoch 23/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8188 - val_loss: 0.7264 - val_acc: 0.8080\n",
      "Epoch 24/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8200 - val_loss: 0.7258 - val_acc: 0.8088\n",
      "Epoch 25/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7074 - acc: 0.8195 - val_loss: 0.7279 - val_acc: 0.8088\n",
      "Epoch 26/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8190 - val_loss: 0.7256 - val_acc: 0.8102\n",
      "Epoch 27/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7069 - acc: 0.8189 - val_loss: 0.7254 - val_acc: 0.8105\n",
      "Epoch 28/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7070 - acc: 0.8194 - val_loss: 0.7273 - val_acc: 0.8078\n",
      "Epoch 29/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8186 - val_loss: 0.7276 - val_acc: 0.8092\n",
      "Epoch 30/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8190 - val_loss: 0.7268 - val_acc: 0.8084\n",
      "Epoch 31/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8179 - val_loss: 0.7323 - val_acc: 0.8060\n",
      "Epoch 32/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7074 - acc: 0.8189 - val_loss: 0.7266 - val_acc: 0.8096\n",
      "Epoch 33/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8199 - val_loss: 0.7250 - val_acc: 0.8093\n",
      "Epoch 34/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8190 - val_loss: 0.7263 - val_acc: 0.8088\n",
      "Epoch 35/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7074 - acc: 0.8189 - val_loss: 0.7268 - val_acc: 0.8093\n",
      "Epoch 36/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8191 - val_loss: 0.7281 - val_acc: 0.8058\n",
      "Epoch 37/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8190 - val_loss: 0.7276 - val_acc: 0.8074\n",
      "Epoch 38/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8197 - val_loss: 0.7266 - val_acc: 0.8097\n",
      "Epoch 39/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8187 - val_loss: 0.7270 - val_acc: 0.8105\n",
      "Epoch 40/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8191 - val_loss: 0.7290 - val_acc: 0.8061\n",
      "10000/10000 [==============================] - 0s 11us/step\n",
      "Train on 60000 samples, validate on 10000 samples\n",
      "Epoch 1/40\n",
      "60000/60000 [==============================] - 1s 23us/step - loss: 0.7073 - acc: 0.8187 - val_loss: 0.7263 - val_acc: 0.8092\n",
      "Epoch 2/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8193 - val_loss: 0.7266 - val_acc: 0.8077\n",
      "Epoch 3/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8189 - val_loss: 0.7253 - val_acc: 0.8097\n",
      "Epoch 4/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8189 - val_loss: 0.7267 - val_acc: 0.8090\n",
      "Epoch 5/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8190 - val_loss: 0.7254 - val_acc: 0.8101\n",
      "Epoch 6/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7071 - acc: 0.8183 - val_loss: 0.7260 - val_acc: 0.8099\n",
      "Epoch 7/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7071 - acc: 0.8198 - val_loss: 0.7271 - val_acc: 0.8068\n",
      "Epoch 8/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8191 - val_loss: 0.7271 - val_acc: 0.8082\n",
      "Epoch 9/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7070 - acc: 0.8196 - val_loss: 0.7255 - val_acc: 0.8088\n",
      "Epoch 10/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7074 - acc: 0.8188 - val_loss: 0.7255 - val_acc: 0.8102\n",
      "Epoch 11/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7071 - acc: 0.8190 - val_loss: 0.7279 - val_acc: 0.8086\n",
      "Epoch 12/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8191 - val_loss: 0.7279 - val_acc: 0.8079\n",
      "Epoch 13/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8193 - val_loss: 0.7274 - val_acc: 0.8080\n",
      "Epoch 14/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8190 - val_loss: 0.7271 - val_acc: 0.8081\n",
      "Epoch 15/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8196 - val_loss: 0.7258 - val_acc: 0.8085\n",
      "Epoch 16/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8189 - val_loss: 0.7276 - val_acc: 0.8058\n",
      "Epoch 17/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8192 - val_loss: 0.7264 - val_acc: 0.8090\n",
      "Epoch 18/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8187 - val_loss: 0.7268 - val_acc: 0.8077\n",
      "Epoch 19/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8188 - val_loss: 0.7257 - val_acc: 0.8098\n",
      "Epoch 20/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7071 - acc: 0.8199 - val_loss: 0.7264 - val_acc: 0.8079\n",
      "Epoch 21/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8191 - val_loss: 0.7256 - val_acc: 0.8095\n",
      "Epoch 22/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8187 - val_loss: 0.7272 - val_acc: 0.8084\n",
      "Epoch 23/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8192 - val_loss: 0.7286 - val_acc: 0.8071\n",
      "Epoch 24/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7071 - acc: 0.8191 - val_loss: 0.7254 - val_acc: 0.8101\n",
      "Epoch 25/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8196 - val_loss: 0.7273 - val_acc: 0.8079\n",
      "Epoch 26/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8192 - val_loss: 0.7251 - val_acc: 0.8093\n",
      "Epoch 27/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8186 - val_loss: 0.7261 - val_acc: 0.8087\n",
      "Epoch 28/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8184 - val_loss: 0.7260 - val_acc: 0.8081\n",
      "Epoch 29/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8196 - val_loss: 0.7258 - val_acc: 0.8082\n",
      "Epoch 30/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8194 - val_loss: 0.7250 - val_acc: 0.8096\n",
      "Epoch 31/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8198 - val_loss: 0.7260 - val_acc: 0.8084\n",
      "Epoch 32/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8186 - val_loss: 0.7267 - val_acc: 0.8073\n",
      "Epoch 33/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8191 - val_loss: 0.7269 - val_acc: 0.8093\n",
      "Epoch 34/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8197 - val_loss: 0.7264 - val_acc: 0.8087\n",
      "Epoch 35/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7074 - acc: 0.8188 - val_loss: 0.7260 - val_acc: 0.8083\n",
      "Epoch 36/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8188 - val_loss: 0.7258 - val_acc: 0.8098\n",
      "Epoch 37/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8188 - val_loss: 0.7256 - val_acc: 0.8094\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 38/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8197 - val_loss: 0.7277 - val_acc: 0.8067\n",
      "Epoch 39/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8190 - val_loss: 0.7276 - val_acc: 0.8077\n",
      "Epoch 40/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7070 - acc: 0.8200 - val_loss: 0.7270 - val_acc: 0.8069\n",
      "10000/10000 [==============================] - 0s 11us/step\n",
      "Train on 60000 samples, validate on 10000 samples\n",
      "Epoch 1/40\n",
      "60000/60000 [==============================] - 1s 21us/step - loss: 0.7072 - acc: 0.8194 - val_loss: 0.7266 - val_acc: 0.8072\n",
      "Epoch 2/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7071 - acc: 0.8191 - val_loss: 0.7286 - val_acc: 0.8062\n",
      "Epoch 3/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8188 - val_loss: 0.7268 - val_acc: 0.8110\n",
      "Epoch 4/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7071 - acc: 0.8182 - val_loss: 0.7263 - val_acc: 0.8081\n",
      "Epoch 5/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7070 - acc: 0.8196 - val_loss: 0.7278 - val_acc: 0.8066\n",
      "Epoch 6/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7074 - acc: 0.8192 - val_loss: 0.7262 - val_acc: 0.8091\n",
      "Epoch 7/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7071 - acc: 0.8192 - val_loss: 0.7255 - val_acc: 0.8085\n",
      "Epoch 8/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7071 - acc: 0.8185 - val_loss: 0.7268 - val_acc: 0.8084\n",
      "Epoch 9/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7071 - acc: 0.8187 - val_loss: 0.7279 - val_acc: 0.8077\n",
      "Epoch 10/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7070 - acc: 0.8189 - val_loss: 0.7255 - val_acc: 0.8088\n",
      "Epoch 11/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8187 - val_loss: 0.7252 - val_acc: 0.8091\n",
      "Epoch 12/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7074 - acc: 0.8191 - val_loss: 0.7271 - val_acc: 0.8092\n",
      "Epoch 13/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8193 - val_loss: 0.7276 - val_acc: 0.8079\n",
      "Epoch 14/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8197 - val_loss: 0.7290 - val_acc: 0.8078\n",
      "Epoch 15/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8197 - val_loss: 0.7279 - val_acc: 0.8086\n",
      "Epoch 16/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8187 - val_loss: 0.7262 - val_acc: 0.8091\n",
      "Epoch 17/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8182 - val_loss: 0.7262 - val_acc: 0.8087\n",
      "Epoch 18/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8193 - val_loss: 0.7264 - val_acc: 0.8082\n",
      "Epoch 19/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7071 - acc: 0.8192 - val_loss: 0.7287 - val_acc: 0.8093\n",
      "Epoch 20/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8194 - val_loss: 0.7265 - val_acc: 0.8094\n",
      "Epoch 21/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7074 - acc: 0.8193 - val_loss: 0.7261 - val_acc: 0.8083\n",
      "Epoch 22/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7074 - acc: 0.8192 - val_loss: 0.7267 - val_acc: 0.8078\n",
      "Epoch 23/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7071 - acc: 0.8191 - val_loss: 0.7260 - val_acc: 0.8081\n",
      "Epoch 24/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8191 - val_loss: 0.7256 - val_acc: 0.8096\n",
      "Epoch 25/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7071 - acc: 0.8191 - val_loss: 0.7255 - val_acc: 0.8083\n",
      "Epoch 26/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8190 - val_loss: 0.7276 - val_acc: 0.8083\n",
      "Epoch 27/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8195 - val_loss: 0.7274 - val_acc: 0.8093\n",
      "Epoch 28/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8204 - val_loss: 0.7252 - val_acc: 0.8094\n",
      "Epoch 29/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8194 - val_loss: 0.7267 - val_acc: 0.8084\n",
      "Epoch 30/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8191 - val_loss: 0.7258 - val_acc: 0.8085\n",
      "Epoch 31/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8193 - val_loss: 0.7283 - val_acc: 0.8064\n",
      "Epoch 32/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8186 - val_loss: 0.7260 - val_acc: 0.8092\n",
      "Epoch 33/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7071 - acc: 0.8187 - val_loss: 0.7258 - val_acc: 0.8092\n",
      "Epoch 34/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8194 - val_loss: 0.7259 - val_acc: 0.8089\n",
      "Epoch 35/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8196 - val_loss: 0.7261 - val_acc: 0.8081\n",
      "Epoch 36/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8195 - val_loss: 0.7298 - val_acc: 0.8052\n",
      "Epoch 37/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8191 - val_loss: 0.7293 - val_acc: 0.8053\n",
      "Epoch 38/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8200 - val_loss: 0.7261 - val_acc: 0.8074\n",
      "Epoch 39/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8197 - val_loss: 0.7267 - val_acc: 0.8079\n",
      "Epoch 40/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8198 - val_loss: 0.7257 - val_acc: 0.8091\n",
      "10000/10000 [==============================] - 0s 11us/step\n",
      "Train on 60000 samples, validate on 10000 samples\n",
      "Epoch 1/40\n",
      "60000/60000 [==============================] - 1s 21us/step - loss: 0.7072 - acc: 0.8196 - val_loss: 0.7266 - val_acc: 0.8092\n",
      "Epoch 2/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8195 - val_loss: 0.7266 - val_acc: 0.8106\n",
      "Epoch 3/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8191 - val_loss: 0.7254 - val_acc: 0.8093\n",
      "Epoch 4/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8190 - val_loss: 0.7252 - val_acc: 0.8087\n",
      "Epoch 5/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8185 - val_loss: 0.7268 - val_acc: 0.8085\n",
      "Epoch 6/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8185 - val_loss: 0.7273 - val_acc: 0.8109\n",
      "Epoch 7/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8185 - val_loss: 0.7261 - val_acc: 0.8087\n",
      "Epoch 8/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8197 - val_loss: 0.7264 - val_acc: 0.8093\n",
      "Epoch 9/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8192 - val_loss: 0.7273 - val_acc: 0.8090\n",
      "Epoch 10/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8199 - val_loss: 0.7257 - val_acc: 0.8070\n",
      "Epoch 11/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8190 - val_loss: 0.7286 - val_acc: 0.8052\n",
      "Epoch 12/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8197 - val_loss: 0.7270 - val_acc: 0.8090\n",
      "Epoch 13/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8186 - val_loss: 0.7256 - val_acc: 0.8101\n",
      "Epoch 14/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8190 - val_loss: 0.7264 - val_acc: 0.8078\n",
      "Epoch 15/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8190 - val_loss: 0.7274 - val_acc: 0.8088\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 16/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8197 - val_loss: 0.7265 - val_acc: 0.8080\n",
      "Epoch 17/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7069 - acc: 0.8188 - val_loss: 0.7271 - val_acc: 0.8095\n",
      "Epoch 18/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8194 - val_loss: 0.7319 - val_acc: 0.8055\n",
      "Epoch 19/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8189 - val_loss: 0.7275 - val_acc: 0.8086\n",
      "Epoch 20/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8187 - val_loss: 0.7276 - val_acc: 0.8080\n",
      "Epoch 21/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8184 - val_loss: 0.7268 - val_acc: 0.8085\n",
      "Epoch 22/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7074 - acc: 0.8191 - val_loss: 0.7278 - val_acc: 0.8051\n",
      "Epoch 23/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8199 - val_loss: 0.7284 - val_acc: 0.8084\n",
      "Epoch 24/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7074 - acc: 0.8195 - val_loss: 0.7268 - val_acc: 0.8078\n",
      "Epoch 25/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8196 - val_loss: 0.7266 - val_acc: 0.8065\n",
      "Epoch 26/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7071 - acc: 0.8194 - val_loss: 0.7262 - val_acc: 0.8079\n",
      "Epoch 27/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8188 - val_loss: 0.7257 - val_acc: 0.8101\n",
      "Epoch 28/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8186 - val_loss: 0.7272 - val_acc: 0.8102\n",
      "Epoch 29/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8191 - val_loss: 0.7260 - val_acc: 0.8084\n",
      "Epoch 30/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8190 - val_loss: 0.7252 - val_acc: 0.8092\n",
      "Epoch 31/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8186 - val_loss: 0.7287 - val_acc: 0.8059\n",
      "Epoch 32/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8195 - val_loss: 0.7269 - val_acc: 0.8090\n",
      "Epoch 33/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8189 - val_loss: 0.7277 - val_acc: 0.8088\n",
      "Epoch 34/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8191 - val_loss: 0.7303 - val_acc: 0.8069\n",
      "Epoch 35/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8192 - val_loss: 0.7285 - val_acc: 0.8080\n",
      "Epoch 36/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8191 - val_loss: 0.7298 - val_acc: 0.8057\n",
      "Epoch 37/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8191 - val_loss: 0.7256 - val_acc: 0.8100\n",
      "Epoch 38/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8194 - val_loss: 0.7251 - val_acc: 0.8114\n",
      "Epoch 39/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8195 - val_loss: 0.7262 - val_acc: 0.8084\n",
      "Epoch 40/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8194 - val_loss: 0.7254 - val_acc: 0.8092\n",
      "10000/10000 [==============================] - 0s 12us/step\n",
      "Train on 60000 samples, validate on 10000 samples\n",
      "Epoch 1/40\n",
      "60000/60000 [==============================] - 1s 21us/step - loss: 0.7071 - acc: 0.8197 - val_loss: 0.7269 - val_acc: 0.8072\n",
      "Epoch 2/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8186 - val_loss: 0.7254 - val_acc: 0.8098\n",
      "Epoch 3/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8189 - val_loss: 0.7263 - val_acc: 0.8091\n",
      "Epoch 4/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8192 - val_loss: 0.7259 - val_acc: 0.8101\n",
      "Epoch 5/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8191 - val_loss: 0.7267 - val_acc: 0.8095\n",
      "Epoch 6/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8183 - val_loss: 0.7257 - val_acc: 0.8088\n",
      "Epoch 7/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8195 - val_loss: 0.7256 - val_acc: 0.8103\n",
      "Epoch 8/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8187 - val_loss: 0.7266 - val_acc: 0.8090\n",
      "Epoch 9/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8199 - val_loss: 0.7255 - val_acc: 0.8094\n",
      "Epoch 10/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8192 - val_loss: 0.7255 - val_acc: 0.8095\n",
      "Epoch 11/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8189 - val_loss: 0.7308 - val_acc: 0.8045\n",
      "Epoch 12/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8186 - val_loss: 0.7286 - val_acc: 0.8091\n",
      "Epoch 13/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8194 - val_loss: 0.7262 - val_acc: 0.8088\n",
      "Epoch 14/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8195 - val_loss: 0.7283 - val_acc: 0.8071\n",
      "Epoch 15/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8193 - val_loss: 0.7257 - val_acc: 0.8091\n",
      "Epoch 16/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8192 - val_loss: 0.7277 - val_acc: 0.8097\n",
      "Epoch 17/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8191 - val_loss: 0.7262 - val_acc: 0.8092\n",
      "Epoch 18/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7076 - acc: 0.8183 - val_loss: 0.7251 - val_acc: 0.8078\n",
      "Epoch 19/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8193 - val_loss: 0.7267 - val_acc: 0.8087\n",
      "Epoch 20/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8187 - val_loss: 0.7283 - val_acc: 0.8087\n",
      "Epoch 21/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8188 - val_loss: 0.7273 - val_acc: 0.8062\n",
      "Epoch 22/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8189 - val_loss: 0.7265 - val_acc: 0.8073\n",
      "Epoch 23/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8189 - val_loss: 0.7276 - val_acc: 0.8075\n",
      "Epoch 24/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8189 - val_loss: 0.7277 - val_acc: 0.8060\n",
      "Epoch 25/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8190 - val_loss: 0.7256 - val_acc: 0.8088\n",
      "Epoch 26/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8186 - val_loss: 0.7254 - val_acc: 0.8098\n",
      "Epoch 27/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8194 - val_loss: 0.7267 - val_acc: 0.8078\n",
      "Epoch 28/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8201 - val_loss: 0.7252 - val_acc: 0.8086\n",
      "Epoch 29/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8188 - val_loss: 0.7254 - val_acc: 0.8092\n",
      "Epoch 30/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8199 - val_loss: 0.7269 - val_acc: 0.8080\n",
      "Epoch 31/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8191 - val_loss: 0.7262 - val_acc: 0.8081\n",
      "Epoch 32/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8197 - val_loss: 0.7258 - val_acc: 0.8091\n",
      "Epoch 33/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7073 - acc: 0.8190 - val_loss: 0.7267 - val_acc: 0.8080\n",
      "Epoch 34/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7075 - acc: 0.8185 - val_loss: 0.7252 - val_acc: 0.8093\n",
      "Epoch 35/40\n",
      "60000/60000 [==============================] - 1s 17us/step - loss: 0.7072 - acc: 0.8186 - val_loss: 0.7259 - val_acc: 0.8089\n",
      "Epoch 36/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8196 - val_loss: 0.7280 - val_acc: 0.8074\n",
      "Epoch 37/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8186 - val_loss: 0.7295 - val_acc: 0.8058\n",
      "Epoch 38/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8190 - val_loss: 0.7273 - val_acc: 0.8079\n",
      "Epoch 39/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8194 - val_loss: 0.7263 - val_acc: 0.8086\n",
      "Epoch 40/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8190 - val_loss: 0.7251 - val_acc: 0.8092\n",
      "10000/10000 [==============================] - 0s 12us/step\n",
      "Train on 60000 samples, validate on 10000 samples\n",
      "Epoch 1/40\n",
      "60000/60000 [==============================] - 1s 21us/step - loss: 0.7070 - acc: 0.8192 - val_loss: 0.7268 - val_acc: 0.8078\n",
      "Epoch 2/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8188 - val_loss: 0.7275 - val_acc: 0.8050\n",
      "Epoch 3/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8189 - val_loss: 0.7263 - val_acc: 0.8081\n",
      "Epoch 4/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8189 - val_loss: 0.7254 - val_acc: 0.8092\n",
      "Epoch 5/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8185 - val_loss: 0.7259 - val_acc: 0.8085\n",
      "Epoch 6/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8191 - val_loss: 0.7261 - val_acc: 0.8084\n",
      "Epoch 7/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8203 - val_loss: 0.7256 - val_acc: 0.8087\n",
      "Epoch 8/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8188 - val_loss: 0.7252 - val_acc: 0.8103\n",
      "Epoch 9/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7069 - acc: 0.8198 - val_loss: 0.7273 - val_acc: 0.8086\n",
      "Epoch 10/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8190 - val_loss: 0.7262 - val_acc: 0.8081\n",
      "Epoch 11/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8191 - val_loss: 0.7249 - val_acc: 0.8098\n",
      "Epoch 12/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8190 - val_loss: 0.7261 - val_acc: 0.8087\n",
      "Epoch 13/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8193 - val_loss: 0.7256 - val_acc: 0.8102\n",
      "Epoch 14/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8194 - val_loss: 0.7264 - val_acc: 0.8088\n",
      "Epoch 15/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8192 - val_loss: 0.7271 - val_acc: 0.8079\n",
      "Epoch 16/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8195 - val_loss: 0.7273 - val_acc: 0.8075\n",
      "Epoch 17/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7076 - acc: 0.8186 - val_loss: 0.7254 - val_acc: 0.8091\n",
      "Epoch 18/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8182 - val_loss: 0.7261 - val_acc: 0.8078\n",
      "Epoch 19/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8188 - val_loss: 0.7265 - val_acc: 0.8073\n",
      "Epoch 20/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8184 - val_loss: 0.7251 - val_acc: 0.8075\n",
      "Epoch 21/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8193 - val_loss: 0.7252 - val_acc: 0.8097\n",
      "Epoch 22/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8189 - val_loss: 0.7281 - val_acc: 0.8081\n",
      "Epoch 23/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8198 - val_loss: 0.7260 - val_acc: 0.8074\n",
      "Epoch 24/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8179 - val_loss: 0.7261 - val_acc: 0.8095\n",
      "Epoch 25/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8199 - val_loss: 0.7268 - val_acc: 0.8092\n",
      "Epoch 26/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8199 - val_loss: 0.7285 - val_acc: 0.8060\n",
      "Epoch 27/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8189 - val_loss: 0.7257 - val_acc: 0.8086\n",
      "Epoch 28/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8185 - val_loss: 0.7260 - val_acc: 0.8085\n",
      "Epoch 29/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8189 - val_loss: 0.7266 - val_acc: 0.8087\n",
      "Epoch 30/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8195 - val_loss: 0.7248 - val_acc: 0.8087\n",
      "Epoch 31/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8193 - val_loss: 0.7266 - val_acc: 0.8104\n",
      "Epoch 32/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8195 - val_loss: 0.7253 - val_acc: 0.8104\n",
      "Epoch 33/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8193 - val_loss: 0.7270 - val_acc: 0.8074\n",
      "Epoch 34/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8195 - val_loss: 0.7301 - val_acc: 0.8023\n",
      "Epoch 35/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8184 - val_loss: 0.7276 - val_acc: 0.8071\n",
      "Epoch 36/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8195 - val_loss: 0.7299 - val_acc: 0.8062\n",
      "Epoch 37/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8188 - val_loss: 0.7258 - val_acc: 0.8089\n",
      "Epoch 38/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8194 - val_loss: 0.7282 - val_acc: 0.8083\n",
      "Epoch 39/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8189 - val_loss: 0.7256 - val_acc: 0.8095\n",
      "Epoch 40/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8189 - val_loss: 0.7250 - val_acc: 0.8111\n",
      "10000/10000 [==============================] - 0s 12us/step\n",
      "Train on 60000 samples, validate on 10000 samples\n",
      "Epoch 1/40\n",
      "60000/60000 [==============================] - 1s 22us/step - loss: 0.7073 - acc: 0.8197 - val_loss: 0.7259 - val_acc: 0.8095\n",
      "Epoch 2/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8196 - val_loss: 0.7281 - val_acc: 0.8091\n",
      "Epoch 3/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8187 - val_loss: 0.7261 - val_acc: 0.8076\n",
      "Epoch 4/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8190 - val_loss: 0.7260 - val_acc: 0.8098\n",
      "Epoch 5/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8192 - val_loss: 0.7273 - val_acc: 0.8078\n",
      "Epoch 6/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8191 - val_loss: 0.7267 - val_acc: 0.8087\n",
      "Epoch 7/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8199 - val_loss: 0.7299 - val_acc: 0.8063\n",
      "Epoch 8/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8198 - val_loss: 0.7281 - val_acc: 0.8056\n",
      "Epoch 9/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8190 - val_loss: 0.7253 - val_acc: 0.8099\n",
      "Epoch 10/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8193 - val_loss: 0.7259 - val_acc: 0.8075\n",
      "Epoch 11/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8188 - val_loss: 0.7254 - val_acc: 0.8096\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 12/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8192 - val_loss: 0.7269 - val_acc: 0.8083\n",
      "Epoch 13/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8190 - val_loss: 0.7299 - val_acc: 0.8054\n",
      "Epoch 14/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8188 - val_loss: 0.7285 - val_acc: 0.8067\n",
      "Epoch 15/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8190 - val_loss: 0.7247 - val_acc: 0.8098\n",
      "Epoch 16/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8190 - val_loss: 0.7260 - val_acc: 0.8093\n",
      "Epoch 17/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8188 - val_loss: 0.7262 - val_acc: 0.8082\n",
      "Epoch 18/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8190 - val_loss: 0.7258 - val_acc: 0.8090\n",
      "Epoch 19/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8193 - val_loss: 0.7288 - val_acc: 0.8064\n",
      "Epoch 20/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8190 - val_loss: 0.7268 - val_acc: 0.8079\n",
      "Epoch 21/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8184 - val_loss: 0.7260 - val_acc: 0.8096\n",
      "Epoch 22/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8190 - val_loss: 0.7261 - val_acc: 0.8086\n",
      "Epoch 23/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8191 - val_loss: 0.7264 - val_acc: 0.8079\n",
      "Epoch 24/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8196 - val_loss: 0.7261 - val_acc: 0.8084\n",
      "Epoch 25/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7075 - acc: 0.8192 - val_loss: 0.7260 - val_acc: 0.8083\n",
      "Epoch 26/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8193 - val_loss: 0.7265 - val_acc: 0.8078\n",
      "Epoch 27/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8191 - val_loss: 0.7284 - val_acc: 0.8080\n",
      "Epoch 28/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8193 - val_loss: 0.7262 - val_acc: 0.8089\n",
      "Epoch 29/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8186 - val_loss: 0.7252 - val_acc: 0.8084\n",
      "Epoch 30/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7075 - acc: 0.8186 - val_loss: 0.7268 - val_acc: 0.8086\n",
      "Epoch 31/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8191 - val_loss: 0.7299 - val_acc: 0.8053\n",
      "Epoch 32/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8187 - val_loss: 0.7256 - val_acc: 0.8077\n",
      "Epoch 33/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8195 - val_loss: 0.7254 - val_acc: 0.8081\n",
      "Epoch 34/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8188 - val_loss: 0.7262 - val_acc: 0.8087\n",
      "Epoch 35/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8193 - val_loss: 0.7254 - val_acc: 0.8092\n",
      "Epoch 36/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8187 - val_loss: 0.7271 - val_acc: 0.8068\n",
      "Epoch 37/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8189 - val_loss: 0.7270 - val_acc: 0.8093\n",
      "Epoch 38/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8195 - val_loss: 0.7253 - val_acc: 0.8083\n",
      "Epoch 39/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8195 - val_loss: 0.7290 - val_acc: 0.8056\n",
      "Epoch 40/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8191 - val_loss: 0.7300 - val_acc: 0.8085\n",
      "10000/10000 [==============================] - 0s 12us/step\n",
      "Train on 60000 samples, validate on 10000 samples\n",
      "Epoch 1/40\n",
      "60000/60000 [==============================] - 1s 22us/step - loss: 0.7076 - acc: 0.8187 - val_loss: 0.7268 - val_acc: 0.8098\n",
      "Epoch 2/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8194 - val_loss: 0.7255 - val_acc: 0.8099\n",
      "Epoch 3/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8187 - val_loss: 0.7271 - val_acc: 0.8094\n",
      "Epoch 4/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8187 - val_loss: 0.7265 - val_acc: 0.8099\n",
      "Epoch 5/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8190 - val_loss: 0.7272 - val_acc: 0.8104\n",
      "Epoch 6/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8192 - val_loss: 0.7287 - val_acc: 0.8067\n",
      "Epoch 7/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8194 - val_loss: 0.7267 - val_acc: 0.8089\n",
      "Epoch 8/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8189 - val_loss: 0.7263 - val_acc: 0.8088\n",
      "Epoch 9/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8196 - val_loss: 0.7256 - val_acc: 0.8086\n",
      "Epoch 10/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8194 - val_loss: 0.7260 - val_acc: 0.8097\n",
      "Epoch 11/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8186 - val_loss: 0.7270 - val_acc: 0.8077\n",
      "Epoch 12/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8190 - val_loss: 0.7270 - val_acc: 0.8094\n",
      "Epoch 13/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8191 - val_loss: 0.7262 - val_acc: 0.8101\n",
      "Epoch 14/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8193 - val_loss: 0.7251 - val_acc: 0.8098\n",
      "Epoch 15/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8187 - val_loss: 0.7260 - val_acc: 0.8086\n",
      "Epoch 16/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8194 - val_loss: 0.7249 - val_acc: 0.8096\n",
      "Epoch 17/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8190 - val_loss: 0.7276 - val_acc: 0.8083\n",
      "Epoch 18/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8192 - val_loss: 0.7263 - val_acc: 0.8100\n",
      "Epoch 19/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8197 - val_loss: 0.7267 - val_acc: 0.8093\n",
      "Epoch 20/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8193 - val_loss: 0.7261 - val_acc: 0.8085\n",
      "Epoch 21/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8195 - val_loss: 0.7264 - val_acc: 0.8088\n",
      "Epoch 22/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8189 - val_loss: 0.7271 - val_acc: 0.8094\n",
      "Epoch 23/40\n",
      "60000/60000 [==============================] - 1s 19us/step - loss: 0.7071 - acc: 0.8197 - val_loss: 0.7262 - val_acc: 0.8093\n",
      "Epoch 24/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7075 - acc: 0.8194 - val_loss: 0.7265 - val_acc: 0.8077\n",
      "Epoch 25/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8192 - val_loss: 0.7254 - val_acc: 0.8092\n",
      "Epoch 26/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8183 - val_loss: 0.7267 - val_acc: 0.8089\n",
      "Epoch 27/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8190 - val_loss: 0.7338 - val_acc: 0.8019\n",
      "Epoch 28/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7075 - acc: 0.8185 - val_loss: 0.7262 - val_acc: 0.8082\n",
      "Epoch 29/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8191 - val_loss: 0.7264 - val_acc: 0.8083\n",
      "Epoch 30/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8187 - val_loss: 0.7273 - val_acc: 0.8091\n",
      "Epoch 31/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8196 - val_loss: 0.7287 - val_acc: 0.8086\n",
      "Epoch 32/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8188 - val_loss: 0.7256 - val_acc: 0.8077\n",
      "Epoch 33/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8197 - val_loss: 0.7258 - val_acc: 0.8090\n",
      "Epoch 34/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8185 - val_loss: 0.7253 - val_acc: 0.8093\n",
      "Epoch 35/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8190 - val_loss: 0.7306 - val_acc: 0.8083\n",
      "Epoch 36/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8200 - val_loss: 0.7254 - val_acc: 0.8106\n",
      "Epoch 37/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8197 - val_loss: 0.7270 - val_acc: 0.8092\n",
      "Epoch 38/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8189 - val_loss: 0.7257 - val_acc: 0.8095\n",
      "Epoch 39/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7075 - acc: 0.8194 - val_loss: 0.7273 - val_acc: 0.8095\n",
      "Epoch 40/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8193 - val_loss: 0.7259 - val_acc: 0.8098\n",
      "10000/10000 [==============================] - 0s 12us/step\n",
      "Train on 60000 samples, validate on 10000 samples\n",
      "Epoch 1/40\n",
      "60000/60000 [==============================] - 1s 22us/step - loss: 0.7070 - acc: 0.8186 - val_loss: 0.7273 - val_acc: 0.8087\n",
      "Epoch 2/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8187 - val_loss: 0.7257 - val_acc: 0.8091\n",
      "Epoch 3/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8191 - val_loss: 0.7272 - val_acc: 0.8076\n",
      "Epoch 4/40\n",
      "60000/60000 [==============================] - 1s 19us/step - loss: 0.7070 - acc: 0.8184 - val_loss: 0.7266 - val_acc: 0.8082\n",
      "Epoch 5/40\n",
      "60000/60000 [==============================] - 1s 19us/step - loss: 0.7071 - acc: 0.8195 - val_loss: 0.7260 - val_acc: 0.8069\n",
      "Epoch 6/40\n",
      "60000/60000 [==============================] - 1s 19us/step - loss: 0.7072 - acc: 0.8190 - val_loss: 0.7268 - val_acc: 0.8094\n",
      "Epoch 7/40\n",
      "60000/60000 [==============================] - 1s 19us/step - loss: 0.7072 - acc: 0.8189 - val_loss: 0.7279 - val_acc: 0.8077\n",
      "Epoch 8/40\n",
      "60000/60000 [==============================] - 1s 19us/step - loss: 0.7073 - acc: 0.8193 - val_loss: 0.7273 - val_acc: 0.8076\n",
      "Epoch 9/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8194 - val_loss: 0.7253 - val_acc: 0.8087\n",
      "Epoch 10/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8194 - val_loss: 0.7252 - val_acc: 0.8085\n",
      "Epoch 11/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8194 - val_loss: 0.7265 - val_acc: 0.8088\n",
      "Epoch 12/40\n",
      "60000/60000 [==============================] - 1s 19us/step - loss: 0.7071 - acc: 0.8187 - val_loss: 0.7261 - val_acc: 0.8094\n",
      "Epoch 13/40\n",
      "60000/60000 [==============================] - 1s 19us/step - loss: 0.7074 - acc: 0.8184 - val_loss: 0.7254 - val_acc: 0.8100\n",
      "Epoch 14/40\n",
      "60000/60000 [==============================] - 1s 19us/step - loss: 0.7072 - acc: 0.8197 - val_loss: 0.7342 - val_acc: 0.8035\n",
      "Epoch 15/40\n",
      "60000/60000 [==============================] - 1s 19us/step - loss: 0.7074 - acc: 0.8186 - val_loss: 0.7274 - val_acc: 0.8087\n",
      "Epoch 16/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8199 - val_loss: 0.7256 - val_acc: 0.8092\n",
      "Epoch 17/40\n",
      "60000/60000 [==============================] - 1s 19us/step - loss: 0.7074 - acc: 0.8190 - val_loss: 0.7254 - val_acc: 0.8086\n",
      "Epoch 18/40\n",
      "60000/60000 [==============================] - 1s 19us/step - loss: 0.7073 - acc: 0.8187 - val_loss: 0.7267 - val_acc: 0.8067\n",
      "Epoch 19/40\n",
      "60000/60000 [==============================] - 1s 19us/step - loss: 0.7075 - acc: 0.8194 - val_loss: 0.7264 - val_acc: 0.8100\n",
      "Epoch 20/40\n",
      "60000/60000 [==============================] - 1s 19us/step - loss: 0.7073 - acc: 0.8192 - val_loss: 0.7254 - val_acc: 0.8087\n",
      "Epoch 21/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8188 - val_loss: 0.7284 - val_acc: 0.8061\n",
      "Epoch 22/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7075 - acc: 0.8184 - val_loss: 0.7252 - val_acc: 0.8098\n",
      "Epoch 23/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8192 - val_loss: 0.7251 - val_acc: 0.8091\n",
      "Epoch 24/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8189 - val_loss: 0.7260 - val_acc: 0.8089\n",
      "Epoch 25/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8194 - val_loss: 0.7251 - val_acc: 0.8088\n",
      "Epoch 26/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8193 - val_loss: 0.7259 - val_acc: 0.8106\n",
      "Epoch 27/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8187 - val_loss: 0.7281 - val_acc: 0.8082\n",
      "Epoch 28/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8197 - val_loss: 0.7283 - val_acc: 0.8048\n",
      "Epoch 29/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8191 - val_loss: 0.7252 - val_acc: 0.8101\n",
      "Epoch 30/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8194 - val_loss: 0.7254 - val_acc: 0.8094\n",
      "Epoch 31/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8190 - val_loss: 0.7273 - val_acc: 0.8085\n",
      "Epoch 32/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8189 - val_loss: 0.7269 - val_acc: 0.8087\n",
      "Epoch 33/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8188 - val_loss: 0.7281 - val_acc: 0.8086\n",
      "Epoch 34/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8191 - val_loss: 0.7258 - val_acc: 0.8087\n",
      "Epoch 35/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8190 - val_loss: 0.7299 - val_acc: 0.8088\n",
      "Epoch 36/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8189 - val_loss: 0.7261 - val_acc: 0.8097\n",
      "Epoch 37/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8189 - val_loss: 0.7262 - val_acc: 0.8096\n",
      "Epoch 38/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8197 - val_loss: 0.7258 - val_acc: 0.8095\n",
      "Epoch 39/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8192 - val_loss: 0.7253 - val_acc: 0.8083\n",
      "Epoch 40/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8188 - val_loss: 0.7257 - val_acc: 0.8095\n",
      "10000/10000 [==============================] - 0s 13us/step\n",
      "Train on 60000 samples, validate on 10000 samples\n",
      "Epoch 1/40\n",
      "60000/60000 [==============================] - 1s 22us/step - loss: 0.7071 - acc: 0.8188 - val_loss: 0.7279 - val_acc: 0.8059\n",
      "Epoch 2/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8192 - val_loss: 0.7265 - val_acc: 0.8092\n",
      "Epoch 3/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8193 - val_loss: 0.7298 - val_acc: 0.8040\n",
      "Epoch 4/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7069 - acc: 0.8185 - val_loss: 0.7279 - val_acc: 0.8102\n",
      "Epoch 5/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8184 - val_loss: 0.7258 - val_acc: 0.8095\n",
      "Epoch 6/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8191 - val_loss: 0.7259 - val_acc: 0.8091\n",
      "Epoch 7/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8188 - val_loss: 0.7274 - val_acc: 0.8084\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 8/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8193 - val_loss: 0.7351 - val_acc: 0.8037\n",
      "Epoch 9/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8195 - val_loss: 0.7266 - val_acc: 0.8074\n",
      "Epoch 10/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8184 - val_loss: 0.7256 - val_acc: 0.8101\n",
      "Epoch 11/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8197 - val_loss: 0.7294 - val_acc: 0.8050\n",
      "Epoch 12/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8185 - val_loss: 0.7254 - val_acc: 0.8081\n",
      "Epoch 13/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8187 - val_loss: 0.7279 - val_acc: 0.8086\n",
      "Epoch 14/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8195 - val_loss: 0.7257 - val_acc: 0.8091\n",
      "Epoch 15/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8187 - val_loss: 0.7278 - val_acc: 0.8079\n",
      "Epoch 16/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8191 - val_loss: 0.7264 - val_acc: 0.8097\n",
      "Epoch 17/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8189 - val_loss: 0.7256 - val_acc: 0.8083\n",
      "Epoch 18/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8193 - val_loss: 0.7256 - val_acc: 0.8088\n",
      "Epoch 19/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8195 - val_loss: 0.7295 - val_acc: 0.8051\n",
      "Epoch 20/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8185 - val_loss: 0.7263 - val_acc: 0.8094\n",
      "Epoch 21/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8191 - val_loss: 0.7260 - val_acc: 0.8094\n",
      "Epoch 22/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8184 - val_loss: 0.7266 - val_acc: 0.8081\n",
      "Epoch 23/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8192 - val_loss: 0.7275 - val_acc: 0.8082\n",
      "Epoch 24/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8190 - val_loss: 0.7275 - val_acc: 0.8081\n",
      "Epoch 25/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8188 - val_loss: 0.7284 - val_acc: 0.8051\n",
      "Epoch 26/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8191 - val_loss: 0.7260 - val_acc: 0.8077\n",
      "Epoch 27/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8190 - val_loss: 0.7264 - val_acc: 0.8083\n",
      "Epoch 28/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8197 - val_loss: 0.7259 - val_acc: 0.8079\n",
      "Epoch 29/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8186 - val_loss: 0.7249 - val_acc: 0.8099\n",
      "Epoch 30/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7076 - acc: 0.8190 - val_loss: 0.7257 - val_acc: 0.8101\n",
      "Epoch 31/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8201 - val_loss: 0.7257 - val_acc: 0.8084\n",
      "Epoch 32/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8189 - val_loss: 0.7268 - val_acc: 0.8074\n",
      "Epoch 33/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8188 - val_loss: 0.7261 - val_acc: 0.8083\n",
      "Epoch 34/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8193 - val_loss: 0.7256 - val_acc: 0.8082\n",
      "Epoch 35/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8190 - val_loss: 0.7269 - val_acc: 0.8090\n",
      "Epoch 36/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8190 - val_loss: 0.7253 - val_acc: 0.8089\n",
      "Epoch 37/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8190 - val_loss: 0.7257 - val_acc: 0.8085\n",
      "Epoch 38/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8186 - val_loss: 0.7265 - val_acc: 0.8088\n",
      "Epoch 39/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8191 - val_loss: 0.7249 - val_acc: 0.8098\n",
      "Epoch 40/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8190 - val_loss: 0.7252 - val_acc: 0.8108\n",
      "10000/10000 [==============================] - 0s 12us/step\n",
      "Train on 60000 samples, validate on 10000 samples\n",
      "Epoch 1/40\n",
      "60000/60000 [==============================] - 1s 22us/step - loss: 0.7073 - acc: 0.8199 - val_loss: 0.7250 - val_acc: 0.8083\n",
      "Epoch 2/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8190 - val_loss: 0.7256 - val_acc: 0.8092\n",
      "Epoch 3/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8179 - val_loss: 0.7270 - val_acc: 0.8088\n",
      "Epoch 4/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8191 - val_loss: 0.7261 - val_acc: 0.8087\n",
      "Epoch 5/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7068 - acc: 0.8191 - val_loss: 0.7265 - val_acc: 0.8084\n",
      "Epoch 6/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8188 - val_loss: 0.7269 - val_acc: 0.8084\n",
      "Epoch 7/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8187 - val_loss: 0.7295 - val_acc: 0.8068\n",
      "Epoch 8/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8191 - val_loss: 0.7276 - val_acc: 0.8063\n",
      "Epoch 9/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8195 - val_loss: 0.7255 - val_acc: 0.8095\n",
      "Epoch 10/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8191 - val_loss: 0.7276 - val_acc: 0.8083\n",
      "Epoch 11/40\n",
      "60000/60000 [==============================] - 1s 19us/step - loss: 0.7073 - acc: 0.8183 - val_loss: 0.7263 - val_acc: 0.8095\n",
      "Epoch 12/40\n",
      "60000/60000 [==============================] - 1s 19us/step - loss: 0.7070 - acc: 0.8195 - val_loss: 0.7277 - val_acc: 0.8087\n",
      "Epoch 13/40\n",
      "60000/60000 [==============================] - 1s 19us/step - loss: 0.7072 - acc: 0.8188 - val_loss: 0.7263 - val_acc: 0.8076\n",
      "Epoch 14/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8190 - val_loss: 0.7262 - val_acc: 0.8092\n",
      "Epoch 15/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8194 - val_loss: 0.7300 - val_acc: 0.8047\n",
      "Epoch 16/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8190 - val_loss: 0.7253 - val_acc: 0.8094\n",
      "Epoch 17/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8194 - val_loss: 0.7256 - val_acc: 0.8089\n",
      "Epoch 18/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8191 - val_loss: 0.7268 - val_acc: 0.8091\n",
      "Epoch 19/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8190 - val_loss: 0.7269 - val_acc: 0.8101\n",
      "Epoch 20/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8190 - val_loss: 0.7255 - val_acc: 0.8088\n",
      "Epoch 21/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8189 - val_loss: 0.7268 - val_acc: 0.8088\n",
      "Epoch 22/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8190 - val_loss: 0.7259 - val_acc: 0.8088\n",
      "Epoch 23/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8189 - val_loss: 0.7255 - val_acc: 0.8090\n",
      "Epoch 24/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8192 - val_loss: 0.7258 - val_acc: 0.8085\n",
      "Epoch 25/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8196 - val_loss: 0.7255 - val_acc: 0.8098\n",
      "Epoch 26/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8188 - val_loss: 0.7265 - val_acc: 0.8103\n",
      "Epoch 27/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8195 - val_loss: 0.7280 - val_acc: 0.8076\n",
      "Epoch 28/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8193 - val_loss: 0.7277 - val_acc: 0.8086\n",
      "Epoch 29/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8190 - val_loss: 0.7256 - val_acc: 0.8098\n",
      "Epoch 30/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8193 - val_loss: 0.7270 - val_acc: 0.8069\n",
      "Epoch 31/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8188 - val_loss: 0.7251 - val_acc: 0.8086\n",
      "Epoch 32/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8188 - val_loss: 0.7290 - val_acc: 0.8062\n",
      "Epoch 33/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8189 - val_loss: 0.7296 - val_acc: 0.8068\n",
      "Epoch 34/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8195 - val_loss: 0.7271 - val_acc: 0.8091\n",
      "Epoch 35/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8189 - val_loss: 0.7293 - val_acc: 0.8063\n",
      "Epoch 36/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8200 - val_loss: 0.7263 - val_acc: 0.8075\n",
      "Epoch 37/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8195 - val_loss: 0.7280 - val_acc: 0.8063\n",
      "Epoch 38/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8194 - val_loss: 0.7255 - val_acc: 0.8079\n",
      "Epoch 39/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8193 - val_loss: 0.7255 - val_acc: 0.8087\n",
      "Epoch 40/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8185 - val_loss: 0.7265 - val_acc: 0.8082\n",
      "10000/10000 [==============================] - 0s 12us/step\n",
      "Train on 60000 samples, validate on 10000 samples\n",
      "Epoch 1/40\n",
      "60000/60000 [==============================] - 1s 22us/step - loss: 0.7074 - acc: 0.8189 - val_loss: 0.7255 - val_acc: 0.8091\n",
      "Epoch 2/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8196 - val_loss: 0.7321 - val_acc: 0.8033\n",
      "Epoch 3/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8198 - val_loss: 0.7266 - val_acc: 0.8075\n",
      "Epoch 4/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8191 - val_loss: 0.7252 - val_acc: 0.8094\n",
      "Epoch 5/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8193 - val_loss: 0.7264 - val_acc: 0.8098\n",
      "Epoch 6/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8188 - val_loss: 0.7292 - val_acc: 0.8059\n",
      "Epoch 7/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7075 - acc: 0.8188 - val_loss: 0.7265 - val_acc: 0.8088\n",
      "Epoch 8/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8197 - val_loss: 0.7265 - val_acc: 0.8095\n",
      "Epoch 9/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8189 - val_loss: 0.7258 - val_acc: 0.8099\n",
      "Epoch 10/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8200 - val_loss: 0.7261 - val_acc: 0.8090\n",
      "Epoch 11/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8190 - val_loss: 0.7277 - val_acc: 0.8063\n",
      "Epoch 12/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8189 - val_loss: 0.7252 - val_acc: 0.8100\n",
      "Epoch 13/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8193 - val_loss: 0.7281 - val_acc: 0.8066\n",
      "Epoch 14/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8188 - val_loss: 0.7288 - val_acc: 0.8065\n",
      "Epoch 15/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8187 - val_loss: 0.7261 - val_acc: 0.8101\n",
      "Epoch 16/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8196 - val_loss: 0.7260 - val_acc: 0.8098\n",
      "Epoch 17/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8195 - val_loss: 0.7329 - val_acc: 0.8041\n",
      "Epoch 18/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8188 - val_loss: 0.7255 - val_acc: 0.8093\n",
      "Epoch 19/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8190 - val_loss: 0.7278 - val_acc: 0.8070\n",
      "Epoch 20/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8192 - val_loss: 0.7258 - val_acc: 0.8091\n",
      "Epoch 21/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8188 - val_loss: 0.7252 - val_acc: 0.8090\n",
      "Epoch 22/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8189 - val_loss: 0.7254 - val_acc: 0.8096\n",
      "Epoch 23/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8200 - val_loss: 0.7259 - val_acc: 0.8094\n",
      "Epoch 24/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7068 - acc: 0.8192 - val_loss: 0.7254 - val_acc: 0.8087\n",
      "Epoch 25/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8191 - val_loss: 0.7253 - val_acc: 0.8097\n",
      "Epoch 26/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8200 - val_loss: 0.7258 - val_acc: 0.8094\n",
      "Epoch 27/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8186 - val_loss: 0.7272 - val_acc: 0.8085\n",
      "Epoch 28/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8192 - val_loss: 0.7266 - val_acc: 0.8087\n",
      "Epoch 29/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8191 - val_loss: 0.7263 - val_acc: 0.8106\n",
      "Epoch 30/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8197 - val_loss: 0.7277 - val_acc: 0.8059\n",
      "Epoch 31/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8195 - val_loss: 0.7265 - val_acc: 0.8097\n",
      "Epoch 32/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8197 - val_loss: 0.7263 - val_acc: 0.8096\n",
      "Epoch 33/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8191 - val_loss: 0.7268 - val_acc: 0.8086\n",
      "Epoch 34/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8191 - val_loss: 0.7311 - val_acc: 0.8040\n",
      "Epoch 35/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8203 - val_loss: 0.7267 - val_acc: 0.8079\n",
      "Epoch 36/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8185 - val_loss: 0.7275 - val_acc: 0.8068\n",
      "Epoch 37/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8189 - val_loss: 0.7256 - val_acc: 0.8093\n",
      "Epoch 38/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8189 - val_loss: 0.7267 - val_acc: 0.8095\n",
      "Epoch 39/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8192 - val_loss: 0.7272 - val_acc: 0.8069\n",
      "Epoch 40/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7076 - acc: 0.8192 - val_loss: 0.7285 - val_acc: 0.8070\n",
      "10000/10000 [==============================] - 0s 12us/step\n",
      "Train on 60000 samples, validate on 10000 samples\n",
      "Epoch 1/40\n",
      "60000/60000 [==============================] - 1s 22us/step - loss: 0.7071 - acc: 0.8195 - val_loss: 0.7274 - val_acc: 0.8084\n",
      "Epoch 2/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8190 - val_loss: 0.7270 - val_acc: 0.8109\n",
      "Epoch 3/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8181 - val_loss: 0.7286 - val_acc: 0.8061\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 4/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8184 - val_loss: 0.7289 - val_acc: 0.8081\n",
      "Epoch 5/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8193 - val_loss: 0.7272 - val_acc: 0.8089\n",
      "Epoch 6/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7075 - acc: 0.8181 - val_loss: 0.7260 - val_acc: 0.8090\n",
      "Epoch 7/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8196 - val_loss: 0.7257 - val_acc: 0.8096\n",
      "Epoch 8/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8191 - val_loss: 0.7257 - val_acc: 0.8088\n",
      "Epoch 9/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8187 - val_loss: 0.7269 - val_acc: 0.8074\n",
      "Epoch 10/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8192 - val_loss: 0.7266 - val_acc: 0.8073\n",
      "Epoch 11/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8192 - val_loss: 0.7263 - val_acc: 0.8091\n",
      "Epoch 12/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8194 - val_loss: 0.7252 - val_acc: 0.8098\n",
      "Epoch 13/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8200 - val_loss: 0.7273 - val_acc: 0.8072\n",
      "Epoch 14/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8193 - val_loss: 0.7269 - val_acc: 0.8087\n",
      "Epoch 15/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8194 - val_loss: 0.7256 - val_acc: 0.8083\n",
      "Epoch 16/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8185 - val_loss: 0.7281 - val_acc: 0.8073\n",
      "Epoch 17/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8184 - val_loss: 0.7258 - val_acc: 0.8095\n",
      "Epoch 18/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8198 - val_loss: 0.7300 - val_acc: 0.8057\n",
      "Epoch 19/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8186 - val_loss: 0.7256 - val_acc: 0.8091\n",
      "Epoch 20/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8191 - val_loss: 0.7256 - val_acc: 0.8084\n",
      "Epoch 21/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8192 - val_loss: 0.7269 - val_acc: 0.8081\n",
      "Epoch 22/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8197 - val_loss: 0.7272 - val_acc: 0.8101\n",
      "Epoch 23/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8193 - val_loss: 0.7272 - val_acc: 0.8071\n",
      "Epoch 24/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8191 - val_loss: 0.7284 - val_acc: 0.8072\n",
      "Epoch 25/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8198 - val_loss: 0.7268 - val_acc: 0.8077\n",
      "Epoch 26/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8189 - val_loss: 0.7266 - val_acc: 0.8087\n",
      "Epoch 27/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8192 - val_loss: 0.7266 - val_acc: 0.8090\n",
      "Epoch 28/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8192 - val_loss: 0.7260 - val_acc: 0.8093\n",
      "Epoch 29/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8185 - val_loss: 0.7250 - val_acc: 0.8093\n",
      "Epoch 30/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8192 - val_loss: 0.7261 - val_acc: 0.8092\n",
      "Epoch 31/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8182 - val_loss: 0.7258 - val_acc: 0.8093\n",
      "Epoch 32/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8189 - val_loss: 0.7273 - val_acc: 0.8092\n",
      "Epoch 33/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8188 - val_loss: 0.7284 - val_acc: 0.8075\n",
      "Epoch 34/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8186 - val_loss: 0.7261 - val_acc: 0.8090\n",
      "Epoch 35/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8187 - val_loss: 0.7259 - val_acc: 0.8087\n",
      "Epoch 36/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8193 - val_loss: 0.7267 - val_acc: 0.8080\n",
      "Epoch 37/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8196 - val_loss: 0.7273 - val_acc: 0.8068\n",
      "Epoch 38/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8192 - val_loss: 0.7269 - val_acc: 0.8094\n",
      "Epoch 39/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8192 - val_loss: 0.7253 - val_acc: 0.8092\n",
      "Epoch 40/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8186 - val_loss: 0.7290 - val_acc: 0.8064\n",
      "10000/10000 [==============================] - 0s 13us/step\n",
      "Train on 60000 samples, validate on 10000 samples\n",
      "Epoch 1/40\n",
      "60000/60000 [==============================] - 1s 23us/step - loss: 0.7073 - acc: 0.8189 - val_loss: 0.7272 - val_acc: 0.8069\n",
      "Epoch 2/40\n",
      "60000/60000 [==============================] - 1s 19us/step - loss: 0.7071 - acc: 0.8185 - val_loss: 0.7268 - val_acc: 0.8098\n",
      "Epoch 3/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8197 - val_loss: 0.7260 - val_acc: 0.8099\n",
      "Epoch 4/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8190 - val_loss: 0.7261 - val_acc: 0.8089\n",
      "Epoch 5/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8194 - val_loss: 0.7293 - val_acc: 0.8082\n",
      "Epoch 6/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8193 - val_loss: 0.7277 - val_acc: 0.8085\n",
      "Epoch 7/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8183 - val_loss: 0.7289 - val_acc: 0.8077\n",
      "Epoch 8/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8186 - val_loss: 0.7265 - val_acc: 0.8106\n",
      "Epoch 9/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8187 - val_loss: 0.7255 - val_acc: 0.8105\n",
      "Epoch 10/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8192 - val_loss: 0.7262 - val_acc: 0.8083\n",
      "Epoch 11/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8192 - val_loss: 0.7276 - val_acc: 0.8082\n",
      "Epoch 12/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8192 - val_loss: 0.7260 - val_acc: 0.8089\n",
      "Epoch 13/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8191 - val_loss: 0.7266 - val_acc: 0.8087\n",
      "Epoch 14/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8191 - val_loss: 0.7260 - val_acc: 0.8079\n",
      "Epoch 15/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8193 - val_loss: 0.7277 - val_acc: 0.8087\n",
      "Epoch 16/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8188 - val_loss: 0.7262 - val_acc: 0.8103\n",
      "Epoch 17/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8197 - val_loss: 0.7258 - val_acc: 0.8093\n",
      "Epoch 18/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7075 - acc: 0.8191 - val_loss: 0.7262 - val_acc: 0.8081\n",
      "Epoch 19/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7075 - acc: 0.8186 - val_loss: 0.7255 - val_acc: 0.8092\n",
      "Epoch 20/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8193 - val_loss: 0.7284 - val_acc: 0.8056\n",
      "Epoch 21/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8199 - val_loss: 0.7262 - val_acc: 0.8100\n",
      "Epoch 22/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8186 - val_loss: 0.7255 - val_acc: 0.8102\n",
      "Epoch 23/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7074 - acc: 0.8193 - val_loss: 0.7319 - val_acc: 0.8044\n",
      "Epoch 24/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8192 - val_loss: 0.7264 - val_acc: 0.8088\n",
      "Epoch 25/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8191 - val_loss: 0.7253 - val_acc: 0.8110\n",
      "Epoch 26/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8188 - val_loss: 0.7261 - val_acc: 0.8088\n",
      "Epoch 27/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8187 - val_loss: 0.7253 - val_acc: 0.8097\n",
      "Epoch 28/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8189 - val_loss: 0.7269 - val_acc: 0.8093\n",
      "Epoch 29/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8198 - val_loss: 0.7260 - val_acc: 0.8089\n",
      "Epoch 30/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8191 - val_loss: 0.7291 - val_acc: 0.8067\n",
      "Epoch 31/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8197 - val_loss: 0.7264 - val_acc: 0.8091\n",
      "Epoch 32/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8185 - val_loss: 0.7258 - val_acc: 0.8088\n",
      "Epoch 33/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7070 - acc: 0.8185 - val_loss: 0.7260 - val_acc: 0.8096\n",
      "Epoch 34/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8193 - val_loss: 0.7261 - val_acc: 0.8094\n",
      "Epoch 35/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8193 - val_loss: 0.7255 - val_acc: 0.8099\n",
      "Epoch 36/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8187 - val_loss: 0.7273 - val_acc: 0.8082\n",
      "Epoch 37/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8190 - val_loss: 0.7253 - val_acc: 0.8098\n",
      "Epoch 38/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7071 - acc: 0.8196 - val_loss: 0.7297 - val_acc: 0.8076\n",
      "Epoch 39/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7073 - acc: 0.8185 - val_loss: 0.7272 - val_acc: 0.8104\n",
      "Epoch 40/40\n",
      "60000/60000 [==============================] - 1s 18us/step - loss: 0.7072 - acc: 0.8196 - val_loss: 0.7294 - val_acc: 0.8062\n",
      "10000/10000 [==============================] - 0s 12us/step\n",
      "[0.8095, 0.8061, 0.8069, 0.8091, 0.8092, 0.8092, 0.8111, 0.8085, 0.8098, 0.8095, 0.8108, 0.8082, 0.807, 0.8064, 0.8062]\n"
     ]
    }
   ],
   "source": [
    "## Your code ########\n",
    "# TODO: Add your code here\n",
    "\n",
    "from keras import initializers\n",
    "\n",
    "batch_size = 50\n",
    "nb_epoch = 40          \n",
    "          \n",
    "output_dim = nb_classes = len(np.unique(y_train))\n",
    "input_dim = x_train.shape[1]\n",
    "l_acc = []\n",
    "\n",
    "for x in range(15):\n",
    "    modelr = Sequential() \n",
    "    modelr.add(Dense(output_dim, input_dim = input_dim, activation='softmax',\n",
    "               kernel_initializer = initializers.RandomNormal(seed=x),\n",
    "               bias_initializer = initializers.Constant(value=0.1),\n",
    "               kernel_regularizer = L1L2(l1=0, l2 = 0.01)))\n",
    "\n",
    "#model.add(Dense(output_dim, input_dim = input_dim, activation='softmax',kernel_regularizer = L1L2(l1=0, l2 = 0.01))) \n",
    "\n",
    "    modelr.compile(optimizer = 'sgd', loss = 'categorical_crossentropy', metrics=['accuracy']) \n",
    "    model.fit(x_train, y3_train, batch_size = batch_size, epochs = nb_epoch, verbose = 1, validation_data = (x_test, y3_test)) \n",
    "    score = model.evaluate(x_test, y3_test) \n",
    "    l_acc.append(score[1])\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.8095, 0.8061, 0.8069, 0.8091, 0.8092, 0.8092, 0.8111, 0.8085, 0.8098, 0.8095, 0.8108, 0.8082, 0.807, 0.8064, 0.8062]\n"
     ]
    }
   ],
   "source": [
    "print(l_acc)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x145233ef0>"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn\n",
    "seaborn.boxplot(x=l_acc, whis = 1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "### Your remarks on logistic network performance, output encoding, and activation/loss functions\n",
    "\n",
    "**TODO**: Edit cell and add your comments\n",
    "    \n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Feature extraction via PCA and ICA\n",
    "\n",
    "Perform principal component analysis (PCA) on the image data; you can use the Scikit-learn ``PCA`` class (already imported above).  If you use ``np.svd`` instead, make sure you normalize your data matrix appropriately."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Your code ########\n",
    "# TODO: Add your code here\n",
    "\n",
    "pca = PCA(n_components=20)\n",
    "x_transformed = pca.fit_transform(x_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, display the top-20 principal components (i.e., eigenvectors of covariance matrix) as images (you can use ``show_images`` defined above), and discuss what they represent, qualitatively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 20 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Your code ########\n",
    "# TODO: Add your code here\n",
    "show_images(pca.components_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "### Your remarks/discussion of principal components:\n",
    "\n",
    "**TODO**: Edit cell and add you comments\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, display the [Scree plot](https://en.wikipedia.org/wiki/Scree_plot).  What is the fraction of the variance explained by the top-20 components?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1288132.61388967,  787596.4855031 ,  267002.83381353,\n",
       "        219903.39102226,  170675.68381773,  153514.06172808,\n",
       "        103873.55826865,   84521.02949531,   59876.84538483,\n",
       "         58298.73675112,   44042.31624519,   40510.49130361,\n",
       "         33969.28462843,   29263.10920602,   26962.93368065,\n",
       "         26162.45715481,   24482.56614577,   23263.54490201,\n",
       "         20312.40775955,   20194.78273267])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Your code ########\n",
    "# TODO: Add your code here\n",
    "\n",
    "eigenvalues = pca.explained_variance_\n",
    "eigenvalues"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "sing_vals = np.arange(20) +1 \n",
    "sing_vals\n",
    "\n",
    "plt.plot(sing_vals, eigenvalues, 'ro-', linewidth=2)\n",
    "plt.title('Scree Plot')\n",
    "plt.xlabel('Principal Component')\n",
    "plt.ylabel('Eigenvalue')\n",
    "plt.xticks(np.arange(1, 21, 1.0))\n",
    "\n",
    "\n",
    "leg = plt.legend(['Eigenvalues from SVD'], loc='best', borderpad=0.3, \n",
    "                 shadow=False, prop=matplotlib.font_manager.FontProperties(size='small'),\n",
    "                 markerscale=0.4)\n",
    "leg.get_frame().set_alpha(0.4)\n",
    "leg.draggable(state=True)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, perform independent component analysis (ICA) on the image data; you can use the Scikit-learn ``FastICA`` class (already imported above).  Note that you may need to limit the number of components, depending on how long estimation takes on your machine."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(60000, 20)"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Your code ########\n",
    "# TODO: Add your code here\n",
    "\n",
    "transformer = FastICA(n_components = 20, random_state=0)\n",
    "X_transformed = transformer.fit_transform(x_train)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Again, plot the top-20 independent components as images (you can use ``show_images`` defined above), and discuss what they represent qualitatively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 20 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Your code ########\n",
    "# TODO: Add your code here\n",
    "show_images(transformer.components_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "### Your remarks/discusssion of independent components:\n",
    "\n",
    "**TODO**: Edit cell and add your comments\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Logistic regression on PCA and ICA features\n",
    "\n",
    "Train a logistic regression on the top-$K$ principal component features and examine it's training and test error.  Does it perform better or worse than the model on the straight features? Why? Also, justify your choice of $K$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "pcal = PCA(n_components= 50)\n",
    "#pca.fit(x_train)\n",
    "\n",
    "x_transformed = pcal.fit_transform(x_train)\n",
    "x_transformed_test = pcal.fit_transform(x_test)\n",
    "\n",
    "#x_transformed.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train score: 0.843083\n",
      "Test score: 0.435200\n"
     ]
    }
   ],
   "source": [
    "## Your code ########\n",
    "# TODO: Add your code here\n",
    "\n",
    "lr = LogisticRegression(solver='lbfgs', multi_class='multinomial',max_iter = 10000)\n",
    "\n",
    "lr.fit(x_transformed, y_train)\n",
    "print(\"Train score: %f\" % lr.score(x_transformed, y_train))\n",
    "print(\"Test score: %f\" % lr.score(x_transformed_test, y_test))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "### Your remarks on PCA-based logistic regression performance (accuracy and training speed) and choice of $K$:\n",
    "\n",
    "**TODO**:  \n",
    "\n",
    "Training speed - Improved / faster than the non PCA based model. \n",
    "Accuracy over the test set is def reduced. \n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, do the same on the top-$K$ independent component features, and answer the same questions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Your code ########\n",
    "# TODO: Add your code here\n",
    "transformer = FastICA(n_components = 100, random_state=0)\n",
    "X_transformedica = transformer.fit_transform(x_train)\n",
    "x_transformed_testica = transformer.fit_transform(x_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train score: 0.807450\n",
      "Test score: 0.111100\n"
     ]
    }
   ],
   "source": [
    "lr = LogisticRegression(solver='lbfgs', multi_class='multinomial',max_iter = 10000)\n",
    "\n",
    "lr.fit(X_transformedica, y_train)\n",
    "print(\"Train score: %f\" % lr.score(X_transformedica, y_train))\n",
    "print(\"Test score: %f\" % lr.score(x_transformed_testica, y_test))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "### Your remarks on ICA-based logistic regression performance and choice of $K$:\n",
    "\n",
    "**TODO**: \n",
    "Faster than PCA but accuracy is compromised.\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Two-layer perceptron\n",
    "\n",
    "Train a two-layer perceptron with $K$ hidden units.  Use the same output layer structure as you used for your logistic regression network before.  Evaluate it's performance, and don't forget to explain your hidden layer activations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(60000, 784) train samples\n",
      "10000 test samples\n"
     ]
    }
   ],
   "source": [
    "## Your code ########\n",
    "# TODO: Add your code here\n",
    "K_hidden = 2 \n",
    "\n",
    "x_train = x_train.astype('float32')\n",
    "x_test = x_test.astype('float32')\n",
    "x_train /= 255\n",
    "x_test /= 255\n",
    "print(x_train.shape[0], 'train samples')\n",
    "print(x_test.shape[0], 'test samples')\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense_18 (Dense)             (None, 512)               401920    \n",
      "_________________________________________________________________\n",
      "dropout_13 (Dropout)         (None, 512)               0         \n",
      "_________________________________________________________________\n",
      "dense_19 (Dense)             (None, 512)               262656    \n",
      "_________________________________________________________________\n",
      "dropout_14 (Dropout)         (None, 512)               0         \n",
      "_________________________________________________________________\n",
      "dense_20 (Dense)             (None, 10)                5130      \n",
      "=================================================================\n",
      "Total params: 669,706\n",
      "Trainable params: 669,706\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "Train on 60000 samples, validate on 10000 samples\n",
      "Epoch 1/22\n",
      "60000/60000 [==============================] - 3s 52us/step - loss: 0.9138 - acc: 0.6606 - val_loss: 0.6289 - val_acc: 0.7569\n",
      "Epoch 2/22\n",
      "60000/60000 [==============================] - 3s 46us/step - loss: 0.5704 - acc: 0.7885 - val_loss: 0.5216 - val_acc: 0.8095\n",
      "Epoch 3/22\n",
      "60000/60000 [==============================] - 3s 46us/step - loss: 0.4918 - acc: 0.8224 - val_loss: 0.4816 - val_acc: 0.8252\n",
      "Epoch 4/22\n",
      "60000/60000 [==============================] - 3s 49us/step - loss: 0.4509 - acc: 0.8358 - val_loss: 0.4500 - val_acc: 0.8335\n",
      "Epoch 5/22\n",
      "60000/60000 [==============================] - 3s 47us/step - loss: 0.4189 - acc: 0.8461 - val_loss: 0.4713 - val_acc: 0.8233\n",
      "Epoch 6/22\n",
      "60000/60000 [==============================] - 3s 44us/step - loss: 0.3983 - acc: 0.8536 - val_loss: 0.4086 - val_acc: 0.8521\n",
      "Epoch 7/22\n",
      "60000/60000 [==============================] - 3s 45us/step - loss: 0.3810 - acc: 0.8598 - val_loss: 0.3920 - val_acc: 0.8571\n",
      "Epoch 8/22\n",
      "60000/60000 [==============================] - 3s 53us/step - loss: 0.3682 - acc: 0.8656 - val_loss: 0.3969 - val_acc: 0.8569\n",
      "Epoch 9/22\n",
      "60000/60000 [==============================] - 3s 45us/step - loss: 0.3564 - acc: 0.8706 - val_loss: 0.3919 - val_acc: 0.8599\n",
      "Epoch 10/22\n",
      "60000/60000 [==============================] - 3s 44us/step - loss: 0.3454 - acc: 0.8732 - val_loss: 0.3934 - val_acc: 0.8571\n",
      "Epoch 11/22\n",
      "60000/60000 [==============================] - 3s 44us/step - loss: 0.3376 - acc: 0.8766 - val_loss: 0.3713 - val_acc: 0.8667\n",
      "Epoch 12/22\n",
      "60000/60000 [==============================] - 3s 44us/step - loss: 0.3279 - acc: 0.8809 - val_loss: 0.3720 - val_acc: 0.8669\n",
      "Epoch 13/22\n",
      "60000/60000 [==============================] - 3s 43us/step - loss: 0.3227 - acc: 0.8829 - val_loss: 0.3504 - val_acc: 0.8764\n",
      "Epoch 14/22\n",
      "60000/60000 [==============================] - 3s 44us/step - loss: 0.3148 - acc: 0.8848 - val_loss: 0.3665 - val_acc: 0.8686\n",
      "Epoch 15/22\n",
      "60000/60000 [==============================] - 3s 44us/step - loss: 0.3096 - acc: 0.8863 - val_loss: 0.3561 - val_acc: 0.8728\n",
      "Epoch 16/22\n",
      "60000/60000 [==============================] - 3s 45us/step - loss: 0.3045 - acc: 0.8884 - val_loss: 0.3528 - val_acc: 0.8750\n",
      "Epoch 17/22\n",
      "60000/60000 [==============================] - 3s 43us/step - loss: 0.2985 - acc: 0.8905 - val_loss: 0.3491 - val_acc: 0.8767\n",
      "Epoch 18/22\n",
      "60000/60000 [==============================] - 3s 44us/step - loss: 0.2950 - acc: 0.8920 - val_loss: 0.3632 - val_acc: 0.8720\n",
      "Epoch 19/22\n",
      "60000/60000 [==============================] - 3s 43us/step - loss: 0.2889 - acc: 0.8933 - val_loss: 0.3559 - val_acc: 0.8766\n",
      "Epoch 20/22\n",
      "60000/60000 [==============================] - 3s 43us/step - loss: 0.2859 - acc: 0.8942 - val_loss: 0.3321 - val_acc: 0.8837\n",
      "Epoch 21/22\n",
      "60000/60000 [==============================] - 3s 44us/step - loss: 0.2801 - acc: 0.8977 - val_loss: 0.3350 - val_acc: 0.8821\n",
      "Epoch 22/22\n",
      "60000/60000 [==============================] - 3s 44us/step - loss: 0.2745 - acc: 0.8988 - val_loss: 0.3376 - val_acc: 0.8805\n",
      "Test loss: 0.3376301384806633\n",
      "Test accuracy: 0.8805\n"
     ]
    }
   ],
   "source": [
    "# convert class vectors to binary class matrices\n",
    "\n",
    "from keras.layers import Dense, Dropout\n",
    "from keras.optimizers import RMSprop\n",
    "\n",
    "batch_size = 128\n",
    "epochs = 22\n",
    "model = Sequential()\n",
    "model.add(Dense(512, activation='relu', input_shape=(784,)))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(512, activation='relu'))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(10, activation='softmax'))\n",
    "\n",
    "model.summary()\n",
    "\n",
    "model.compile(loss='categorical_crossentropy',\n",
    "              optimizer=RMSprop(),\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "history = model.fit(x_train, y3_train,\n",
    "                    batch_size = batch_size,\n",
    "                    epochs = epochs,\n",
    "                    verbose = 1,\n",
    "                    validation_data = (x_test, y3_test))\n",
    "score = model.evaluate(x_test, y3_test, verbose=0)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test loss: 0.3376301384806633\n",
      "Test accuracy: 0.8805\n"
     ]
    }
   ],
   "source": [
    "print('Test loss:', score[0])\n",
    "print('Test accuracy:', score[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Also, plot the hidden layer weights as images (you can use ``show_images`` again), and discuss what they might qualitatively represent."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Your code ########\n",
    "# TODO: Add your code here\n",
    "\n",
    "from keract import get_gradients_of_trainable_weights, display_gradients_of_trainable_weights\n",
    "display = get_gradients_of_trainable_weights(model, x_train, y3_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['dense_18/kernel:0', 'dense_18/bias:0', 'dense_19/kernel:0', 'dense_19/bias:0', 'dense_20/kernel:0', 'dense_20/bias:0'])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "display.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10, 784)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.coef_.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(20, 784)"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#hidden layer \n",
    "display['dense_19/kernel:0'].shape\n",
    "display_arr = np.array(display['dense_18/kernel:0']).T\n",
    "data_points = display_arr[0:20]\n",
    "    \n",
    "data_points.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 20 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "show_images(data_points, cols = 5, cmap = plt.cm.gray)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "### Your remarks on 2LP, choice of $K$, hidden activations, and interpretation of hidden weights\n",
    "\n",
    "**TODO**: Edit cell and add your comments.\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Furthermore, is it possible to choose activation and loss functions in such a way that the network model performs PCA followed by logistic regression, or something similar?  Would it be identical, or not?  Briefly justify your answer.  Even if it is possible, is it desirable?  Why or why not?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "### Your remarks on 2LP for PCA + logistic regression\n",
    "\n",
    "**TODO**: Edit cell and add your comments.\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Convolutional networks\n",
    "\n",
    "Design a convolutional network for the classification task at hand.  Your aim should be to achieve the best prediction performance you can, given available resources."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(60000, 28, 28)"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Your code ########\n",
    "# TODO: Add your code here\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x_train shape: (60000, 28, 28, 1)\n",
      "Number of images in x_train_conv 60000\n",
      "Number of images in x_test_conv 10000\n"
     ]
    }
   ],
   "source": [
    "img_rows = x3_train.shape[1]\n",
    "img_cols = x3_train.shape[2]\n",
    "\n",
    "x_train_conv = x_train.reshape(x3_train.shape[0], img_rows, img_cols, 1)\n",
    "x_test_conv = x_test.reshape(x3_test.shape[0], img_rows, img_cols, 1)\n",
    "input_shape = (img_rows, img_cols, 1)\n",
    "\n",
    "#more reshaping\n",
    "x_train_conv = x_train_conv.astype('float32')\n",
    "x_test_conv = x_test_conv.astype('float32')\n",
    "x_train_conv /= 255\n",
    "x_test_conv /= 255\n",
    "print('x_train shape:', x_train_conv.shape)\n",
    "print('Number of images in x_train_conv', x_train_conv.shape[0])\n",
    "print('Number of images in x_test_conv', x_test_conv.shape[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(28, 28, 1)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "input_shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /Users/shradhitsubudhi/anaconda3/envs/python37/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:3445: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv2d_3 (Conv2D)            (None, 26, 26, 28)        280       \n",
      "_________________________________________________________________\n",
      "max_pooling2d_3 (MaxPooling2 (None, 13, 13, 28)        0         \n",
      "_________________________________________________________________\n",
      "flatten_2 (Flatten)          (None, 4732)              0         \n",
      "_________________________________________________________________\n",
      "dense_3 (Dense)              (None, 128)               605824    \n",
      "_________________________________________________________________\n",
      "dropout_1 (Dropout)          (None, 128)               0         \n",
      "_________________________________________________________________\n",
      "dense_4 (Dense)              (None, 10)                1290      \n",
      "=================================================================\n",
      "Total params: 607,394\n",
      "Trainable params: 607,394\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D\n",
    "import tensorflow as tf\n",
    "\n",
    "# Creating a Sequential Model and adding the layers\n",
    "modelc = Sequential()\n",
    "modelc.add(Conv2D(28, kernel_size=(3,3), input_shape=input_shape))\n",
    "modelc.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "modelc.add(Flatten()) # Flattening the 2D arrays for fully connected layers\n",
    "modelc.add(Dense(128, activation=tf.nn.relu))\n",
    "modelc.add(Dropout(0.2))\n",
    "modelc.add(Dense(10,activation=tf.nn.softmax))\n",
    "modelc.compile(optimizer='adam', \n",
    "              loss='sparse_categorical_crossentropy', \n",
    "              metrics=['accuracy'])\n",
    "modelc.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/15\n",
      "60000/60000 [==============================] - 11s 183us/step - loss: 0.1040 - acc: 0.9609\n",
      "Epoch 2/15\n",
      "60000/60000 [==============================] - 11s 184us/step - loss: 0.0955 - acc: 0.9636\n",
      "Epoch 3/15\n",
      "60000/60000 [==============================] - 11s 184us/step - loss: 0.0870 - acc: 0.9675\n",
      "Epoch 4/15\n",
      "60000/60000 [==============================] - 11s 185us/step - loss: 0.0835 - acc: 0.9689\n",
      "Epoch 5/15\n",
      "60000/60000 [==============================] - 11s 184us/step - loss: 0.0793 - acc: 0.9706\n",
      "Epoch 6/15\n",
      "60000/60000 [==============================] - 11s 184us/step - loss: 0.0765 - acc: 0.9716\n",
      "Epoch 7/15\n",
      "60000/60000 [==============================] - 11s 186us/step - loss: 0.0694 - acc: 0.9738\n",
      "Epoch 8/15\n",
      "60000/60000 [==============================] - 11s 185us/step - loss: 0.0674 - acc: 0.9747\n",
      "Epoch 9/15\n",
      "60000/60000 [==============================] - 11s 188us/step - loss: 0.0623 - acc: 0.9770\n",
      "Epoch 10/15\n",
      "60000/60000 [==============================] - 11s 188us/step - loss: 0.0610 - acc: 0.9777\n",
      "Epoch 11/15\n",
      "60000/60000 [==============================] - 11s 187us/step - loss: 0.0580 - acc: 0.9786\n",
      "Epoch 12/15\n",
      "60000/60000 [==============================] - 11s 188us/step - loss: 0.0564 - acc: 0.9794\n",
      "Epoch 13/15\n",
      "60000/60000 [==============================] - 11s 189us/step - loss: 0.0552 - acc: 0.9795\n",
      "Epoch 14/15\n",
      "60000/60000 [==============================] - 11s 188us/step - loss: 0.0538 - acc: 0.9804\n",
      "Epoch 15/15\n",
      "60000/60000 [==============================] - 11s 188us/step - loss: 0.0523 - acc: 0.9810\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x14a0fd2e8>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modelc.fit(x = x_train_conv, y = y_train, epochs = 15)\n",
    "#y3_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10000/10000 [==============================] - 1s 67us/step\n"
     ]
    }
   ],
   "source": [
    "score = modelc.evaluate(x_test_conv, y_test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot the convolution kernels of your first convolutional layer as images."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Accuracy : 0.914200 \n"
     ]
    }
   ],
   "source": [
    "print(\"Model Accuracy : %f \" % score[1] )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.models import Model\n",
    "layer_outputs = [layer.output for layer in modelc.layers]\n",
    "activation_model = Model(inputs=modelc.input, outputs=layer_outputs)\n",
    "activations = activation_model.predict(x_test_conv[10].reshape(1,28,28,1))\n",
    " \n",
    "def display_activation(activations, col_size, row_size, act_index): \n",
    "    activation = activations[act_index]\n",
    "    activation_index=0\n",
    "    fig, ax = plt.subplots(row_size, col_size, figsize=(row_size*2.5,col_size*1.5))\n",
    "    for row in range(0,row_size):\n",
    "        for col in range(0,col_size):\n",
    "            ax[row][col].imshow(activation[0, :, :, activation_index], cmap='gray')\n",
    "            activation_index += 1\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(x_train_conv[10][:,:,0]);\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Choose one data point from each class, and plot the first layer convolution outputs (again, as images) for each of them.  For convenience, you can use the first occurence of each class, as given by the code below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Find the indices of the first occurence of each class within the training set\n",
    "repr_index = np.zeros(n_classes, dtype=np.int)\n",
    "for c in range(n_classes):\n",
    "    repr_index[c] = np.argwhere(y_train == c)[0,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1, 16,  5,  3, 19,  8, 18,  6, 23,  0])"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "repr_index    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(x_train_conv[1][:,:,0]);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(x_train_conv[16][:,:,0]);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(x_train_conv[5][:,:,0]);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(x_train_conv[3][:,:,0]);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(x_train_conv[19][:,:,0]);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(x_train_conv[8][:,:,0]);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(x_train_conv[18][:,:,0]);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(x_train_conv[6][:,:,0]);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(x_train_conv[23][:,:,0]);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(x_train_conv[0][:,:,0]);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "### Your discussion of possible qualitative interpretation of the convolution kernels\n",
    "\n",
    "**TODO**: Edit cell and add your comments\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Submitting your work\n",
    "\n",
    "Edit all the code and markdown cells marked with \"TODO\" and add your answers.  Please leave the horizontal rules (``---``) in markdown cells as well as the first comment (``## Your code ########``) in code cells, to make it easier to locate your answers.\n",
    "\n",
    "### Please upload your ``.ipynb`` notebook file, **as well as a ``.pdf`` printout of it**.\n",
    "This allows us to read your answers from *within* Canvas (``pdf``) as well as, if necessary, download and rerun parts of your code (``ipynb``)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
